{"paragraphs":[{"text":"%md <img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>","user":"anonymous","dateUpdated":"2019-04-26T12:31:20+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274677466_1910171083","id":"20190426-123117_907029457","dateCreated":"2019-04-26T12:31:17+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:33241","dateFinished":"2019-04-26T12:31:20+0200","dateStarted":"2019-04-26T12:31:20+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>\n</div>"}]}},{"text":"%md\n# PySpark - RDD","user":"anonymous","dateUpdated":"2019-04-26T12:21:50+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>PySpark - RDD</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556273400251_-1339113214","id":"20190426-121000_764038440","dateCreated":"2019-04-26T12:10:00+0200","dateStarted":"2019-04-26T12:21:50+0200","dateFinished":"2019-04-26T12:21:50+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31590"},{"text":"%md\nCheck out the cheat sheet for [PySpark - RDD](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PySpark_Cheat_Sheet_Python.pdf)","user":"anonymous","dateUpdated":"2019-04-26T12:21:55+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Check out the cheat sheet for <a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PySpark_Cheat_Sheet_Python.pdf\">PySpark - RDD</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274106941_-2116154862","id":"20190426-122146_55063472","dateCreated":"2019-04-26T12:21:46+0200","dateStarted":"2019-04-26T12:21:55+0200","dateFinished":"2019-04-26T12:21:55+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31591"},{"text":"%md\n# PySpark - SQL","user":"anonymous","dateUpdated":"2019-04-26T12:22:01+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>PySpark - SQL</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274115837_-1743219733","id":"20190426-122155_647072009","dateCreated":"2019-04-26T12:21:55+0200","dateStarted":"2019-04-26T12:22:01+0200","dateFinished":"2019-04-26T12:22:01+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31592"},{"text":"%md\nCheck out the cheat sheet for [PySpark - SQL](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PySpark_SQL_Cheat_Sheet_Python.pdf)","user":"anonymous","dateUpdated":"2019-04-26T12:22:06+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Check out the cheat sheet for <a href=\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PySpark_SQL_Cheat_Sheet_Python.pdf\">PySpark - SQL</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274121692_1286875204","id":"20190426-122201_1249706128","dateCreated":"2019-04-26T12:22:01+0200","dateStarted":"2019-04-26T12:22:06+0200","dateFinished":"2019-04-26T12:22:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31593"},{"text":"%md\n# Python","user":"anonymous","dateUpdated":"2019-04-26T12:22:14+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Python</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274126749_845446376","id":"20190426-122206_2091359478","dateCreated":"2019-04-26T12:22:06+0200","dateStarted":"2019-04-26T12:22:14+0200","dateFinished":"2019-04-26T12:22:14+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31594"},{"text":"%md\nCheck out the cheat sheet for [Python](https://github.com/ehmatthes/pcc/releases/download/v1.0.0/beginners_python_cheat_sheet_pcc_all.pdf)","user":"anonymous","dateUpdated":"2019-04-26T12:22:19+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Check out the cheat sheet for <a href=\"https://github.com/ehmatthes/pcc/releases/download/v1.0.0/beginners_python_cheat_sheet_pcc_all.pdf\">Python</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274134533_-185623129","id":"20190426-122214_1936103914","dateCreated":"2019-04-26T12:22:14+0200","dateStarted":"2019-04-26T12:22:19+0200","dateFinished":"2019-04-26T12:22:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31595"},{"text":"%md\n# Python - Lists, Tuples, Dictionaries and Sets","user":"anonymous","dateUpdated":"2019-04-26T12:22:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Python - Lists, Tuples, Dictionaries and Sets</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274139701_936058008","id":"20190426-122219_470693973","dateCreated":"2019-04-26T12:22:19+0200","dateStarted":"2019-04-26T12:22:28+0200","dateFinished":"2019-04-26T12:22:28+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31596"},{"text":"%python\n### Lists ###\nmyList = [0,2,7, 'test'] # a list contains elements\nprint('First List Element: {}'.format(myList[0])) # indexing the first element\nprint('Last List Element: {}'.format(myList[-1])) # indexing the last element\nmyList.append('new item') # adding an item at the end\nprint(myList)\nmyList += ['newer item'] # concatenating two lists is quite convenient.\nprint(myList)\nprint('\\n')\n\n\n### Tuples\n# tuples can be accessed just like lists. however, tuples are immutable while lists are not.\nmyTuple = (0,2,7, 'test') \n\n# let's see for ourselves. we try to change the first element in the list / tuple\nmyList[0] = 'new Value'\nprint(myList[0])\ntry:\n  myTuple[0] = 'new Value'\nexcept Exception as e:\n  print('Tuples are Immutable! Error: {}'.format(e))\nprint('\\n')\n\n### Dictionaries ###\n# a dictionary is essentially a key-value pair. you can pretty much use any data structure as value\nmyDict = {\n  'first name': 'foo',\n  'last name': 'bar',\n  'birth year': 1965,\n  'hobbies': ['long walks', 'testing', 1234]\n}\nmyDict['birth place'] = 'smokey stover' # adding key-value pairs\nprint(myDict['first name']) # accessing values via the key\n\n# fun fact: a key lookup in a dictionary is O(1).\n# more infos regarding complexity on https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt\nprint('Is hobbies a key in the dictionary? {}'.format('hobbies' in myDict))\nprint('\\n')\n\n### Sets ###\n# sets are mutable and only contain unique elements!\n# there exists a data structure called 'frozenset', which is essentially an immutable set\nmySet1 = set([1,2,'test']) \nmySet2 = set([1,2,'test', 1, 2, 'test']) \nprint(mySet2)\n\n# there are a bunch of built-in methods\nprint(set([1,2,3]).intersection(set([3,4,5])))\nprint(set([1,2,3]).union(set([3,4,5])))","user":"anonymous","dateUpdated":"2019-04-26T12:22:48+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"First List Element: 0\nLast List Element: test\n[0, 2, 7, 'test', 'new item']\n[0, 2, 7, 'test', 'new item', 'newer item']\n\n\nnew Value\nTuples are Immutable! Error: 'tuple' object does not support item assignment\n\n\nfoo\nIs hobbies a key in the dictionary? True\n\n\n{1, 2, 'test'}\n{3}\n{1, 2, 3, 4, 5}\n"}]},"apps":[],"jobName":"paragraph_1556274148405_-876576162","id":"20190426-122228_1434913086","dateCreated":"2019-04-26T12:22:28+0200","dateStarted":"2019-04-26T12:22:48+0200","dateFinished":"2019-04-26T12:22:48+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31597"},{"text":"%md\n# Python - Functions, Classes and Attributes","user":"anonymous","dateUpdated":"2019-04-26T12:23:00+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Python - Functions, Classes and Attributes</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274155261_-1934360996","id":"20190426-122235_641207845","dateCreated":"2019-04-26T12:22:35+0200","dateStarted":"2019-04-26T12:23:00+0200","dateFinished":"2019-04-26T12:23:00+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31598"},{"text":"%python\n# anonymous function\nf = lambda x: x**2\n\n# regular function\ndef f(x):\n  return x**2","user":"anonymous","dateUpdated":"2019-04-26T12:23:12+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1556274180100_1290057225","id":"20190426-122300_1654704498","dateCreated":"2019-04-26T12:23:00+0200","dateStarted":"2019-04-26T12:23:12+0200","dateFinished":"2019-04-26T12:23:12+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31599"},{"text":"# a class requires initialization, can contain several functions and attributes\nclass Customer(object):\n  \n  version = '0.1'\n  \n  def __init__(self, name, balance=0.):\n    self.name = name\n    self.balance = balance\n    \n  def widthdraw(self, amount):\n    if amount > self.balance:\n            raise RuntimeError('You broke.')\n    self.balance -= amount\n    return self.balance\n  \n  def deposit(self, amount):\n    self.balance += amount\n    return self.balance\n\n# Let's create a Customer-Class instance\nnewCustomer = Customer(name = 'foo', balance = 100.)\n\n# We can play with the functions\nprint('Widthdraw 50 results in a balance of: {}'.format(newCustomer.widthdraw(50)))\nprint('Deposit 200 results in a balance of: {}'.format(newCustomer.deposit(200)))\n\n# We can check the version attribute. Note, since this is a class attribute, every instance will have it. However, the instance attributes (__init__()) can vary from instance to instance.\nprint('Software Version: {}'.format(newCustomer.version))","user":"anonymous","dateUpdated":"2019-04-26T12:23:26+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Widthdraw 50 results in a balance of: 50.0\nDeposit 200 results in a balance of: 250.0\nSoftware Version: 0.1\n"}]},"apps":[],"jobName":"paragraph_1556274184797_-1121032310","id":"20190426-122304_1136375638","dateCreated":"2019-04-26T12:23:04+0200","dateStarted":"2019-04-26T12:23:26+0200","dateFinished":"2019-04-26T12:23:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31600"},{"text":"%md\n# Python - Containers, Iterators and Generators","user":"anonymous","dateUpdated":"2019-04-26T12:23:33+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Python - Containers, Iterators and Generators</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274206630_-1343902075","id":"20190426-122326_258359891","dateCreated":"2019-04-26T12:23:26+0200","dateStarted":"2019-04-26T12:23:33+0200","dateFinished":"2019-04-26T12:23:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31601"},{"text":"%md\n<img src='https://nvie.com/img/relationships.png'>","user":"anonymous","dateUpdated":"2019-04-26T12:23:44+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://nvie.com/img/relationships.png'>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274213190_-1320695152","id":"20190426-122333_1375226313","dateCreated":"2019-04-26T12:23:33+0200","dateStarted":"2019-04-26T12:23:44+0200","dateFinished":"2019-04-26T12:23:44+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31602"},{"text":"%python\n# this is a list. A list is iterable...as is a tuple, a set and a dictionary. they are containers.\nmyList = ['I', 'am', 'a list']\nfor item in myList: print(item)\n# and this is a list comprehension\nmyNewList = [x + ' not' for x in myList]\nprint(myNewList)\nprint('\\n')\n  \n# this is an iterator.\n# it is an object that has __iter__ and __next__ functions implemented.\nclass Squares(object):\n  \n    def __init__(self, start, stop):\n       self.start = start\n       self.stop = stop\n      \n    def __iter__(self):\n      return self\n    \n    def next(self):\n       if self.start >= self.stop:\n           raise StopIteration\n       current = self.start * self.start\n       self.start += 1\n       return current\n    \niterator = Squares(2, 10)\n\n# we can ask for the next value when we NEED it\nprint(iterator.next())\n# and again\nprint(iterator.next())\n# and put the rest into a some list\nprint(list(iterator))\n# note, once the iterator is exhausted. you need to reinitialize it if you want to use it again.\n\n# we can put everything into a list as well.\nmyIteratorList = list(Squares(2,10))\nprint(myIteratorList)\n\nprint('\\n')\n\n# this is a generator expression. A generator is always an iterator. You can think of it as some kind of shortcut for writing an iterator class.\ngenerator0 = (x**2 for x in xrange(2, 10))\nprint(generator0.next())\nprint(generator0.next())\nprint(list(generator0))\nprint('\\n')\n\n# another way of writing the previous generator is as a function:\ndef myGenerator1(a, b):\n  for x in xrange(2, 10):\n    yield x**2 \n\ngenerator1 = myGenerator1(2, 10)\nprint(generator1.next())\nprint(generator1.next())\nprint(list(generator1))\nprint('\\n')\n\n# a generator function looks just like a regular function, except you use yield instead of return. \n# actually, when using yield, the state of the function is not reseted. e. g. you continue where you left off during the previous call\n# hence you could rewrite the generator function as follows:\ndef myGenerator2(a, b):\n  while a < b:\n    yield a**2\n    a +=1\n    \ngenerator2 = myGenerator2(2,10)\nprint(generator2.next())\nprint(generator2.next())\nprint(list(generator2))","user":"anonymous","dateUpdated":"2019-04-26T12:23:59+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"I\nam\na list\n['I not', 'am not', 'a list not']\n\n\n4\n9\n"},{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 21, in <module>\nTypeError: iter() returned non-iterator of type 'Squares'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 21, in <module>\nTypeError: iter() returned non-iterator of type 'Squares'\n\n"}]},"apps":[],"jobName":"paragraph_1556274218398_1608238232","id":"20190426-122338_351588643","dateCreated":"2019-04-26T12:23:38+0200","dateStarted":"2019-04-26T12:23:59+0200","dateFinished":"2019-04-26T12:23:59+0200","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:31603"},{"text":"%md\n# Python - Functional Programming","user":"anonymous","dateUpdated":"2019-04-26T12:24:10+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Python - Functional Programming</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274230485_-1915940980","id":"20190426-122350_1576860382","dateCreated":"2019-04-26T12:23:50+0200","dateStarted":"2019-04-26T12:24:10+0200","dateFinished":"2019-04-26T12:24:10+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31604"},{"text":"%md\nOOP is about to die :D. Hence, let's check out some functional approaches.\n\n`map` Applies a function to every element in an iterable object. <br>\n`reduce` Applies a function to every ekenebt and returns a single value. <br>\n<img src='https://www.python-kurs.eu/images/reduce_veranschaulichung.png' style='width:400px'><br>\n`filter` Selects elements from an iterable object based on some logic.<br>\n`zip` Turns multiple iterables into element-wise tuples.","user":"anonymous","dateUpdated":"2019-04-26T12:24:15+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>OOP is about to die :D. Hence, let&rsquo;s check out some functional approaches.</p>\n<p><code>map</code> Applies a function to every element in an iterable object. <br><br/><code>reduce</code> Applies a function to every ekenebt and returns a single value. <br><br/><img src='https://www.python-kurs.eu/images/reduce_veranschaulichung.png' style='width:400px'><br><br/><code>filter</code> Selects elements from an iterable object based on some logic.<br><br/><code>zip</code> Turns multiple iterables into element-wise tuples.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274250518_687936423","id":"20190426-122410_478094392","dateCreated":"2019-04-26T12:24:10+0200","dateStarted":"2019-04-26T12:24:15+0200","dateFinished":"2019-04-26T12:24:15+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31605"},{"text":"%python\nfrom functools import reduce\n\nsquares = map(lambda x: x**2, range(10))\n# pythonic way: squares = [x**2 for x in xrange(10)]\nprint(squares)\n\nsumOfSquares = reduce(lambda accum, addMe: accum + addMe, squares)\n# pythonic way:\n# sumOfSquares = 0\n# for x in squares: sumOfSquares += x\nprint(sumOfSquares)\n\nbigger50 = filter(lambda x: x > 50, squares)\n# pythonic way: bigger50 = [x for x in squares if x > 50]\nprint(bigger50)\n\nzippMe = zip(['hi', 'how', 'you'], ['there', 'are', 'doing'])\nprint(zippMe)","user":"anonymous","dateUpdated":"2019-04-26T12:24:24+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<map object at 0x114fdeeb8>\n285\n<filter object at 0x114fdeac8>\n<zip object at 0x114e62888>\n"}]},"apps":[],"jobName":"paragraph_1556274255758_-1642251593","id":"20190426-122415_1149510778","dateCreated":"2019-04-26T12:24:15+0200","dateStarted":"2019-04-26T12:24:24+0200","dateFinished":"2019-04-26T12:24:24+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31606"},{"text":"# the cool stuff: recursion instead of loops \n# apparently, recursion is a bit slower than loops in python. thus, be careful when to use it.\n# note: python has a recursion depth limit!... which you can adjust: sys.setrecursionlimit(1e3)\n\n#  simple loop construct\nacc = 0\nfor i in range(1,11): acc += i\nprint(acc) \n\n# without loop construct or variables (recursion)\ndef sumRange(start, end, acc):\n    if (start > end): return acc\n    return sumRange(start + 1, end, acc + start)\n\nprint(sumRange(1, 10, 0)) ","user":"anonymous","dateUpdated":"2019-04-26T12:24:33+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"55\n55\n"}]},"apps":[],"jobName":"paragraph_1556274264142_-857932160","id":"20190426-122424_1800816150","dateCreated":"2019-04-26T12:24:24+0200","dateStarted":"2019-04-26T12:24:33+0200","dateFinished":"2019-04-26T12:24:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31607"},{"text":"# the even cooler stuff: chaining\n\n# our helpers\ndef call(x, fn): return fn(x)\nsquare = lambda x : x*x\nincrement = lambda x : x+1\ncube = lambda x : x*x*x\ndecrement = lambda x : x-1\nfuncs = [square, increment, cube, decrement]\n\n# let's chain\nprint(reduce(call, funcs, 97))\n\n# what is going on ??\n# in math: ((((97^2)+1)^3)-1)","user":"anonymous","dateUpdated":"2019-04-26T12:24:41+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"833237620999\n"}]},"apps":[],"jobName":"paragraph_1556274273630_-2015735690","id":"20190426-122433_999530939","dateCreated":"2019-04-26T12:24:33+0200","dateStarted":"2019-04-26T12:24:41+0200","dateFinished":"2019-04-26T12:24:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31608"},{"text":"%md\nPython was not designed for functional programming. However, you can make it work.<br>\nA few resources for the interested reader:\n- [awesome-functional-python](https://github.com/sfermigier/awesome-functional-python)","user":"anonymous","dateUpdated":"2019-04-26T12:24:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Python was not designed for functional programming. However, you can make it work.<br><br/>A few resources for the interested reader:<br/>- <a href=\"https://github.com/sfermigier/awesome-functional-python\">awesome-functional-python</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556274281046_926453292","id":"20190426-122441_857364586","dateCreated":"2019-04-26T12:24:41+0200","dateStarted":"2019-04-26T12:24:46+0200","dateFinished":"2019-04-26T12:24:46+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:31609"}],"name":"/6. Exercises/Python Cheat Sheet","id":"2E8RC5W3Z","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}