{"paragraphs":[{"text":"%md <img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055278_220831043","id":"20190426-123031_1665537052","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15643"},{"text":"%md # Scala for Spark Cheat Sheet","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Scala for Spark Cheat Sheet</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055278_-1731999307","id":"20190426-122612_662812292","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15644"},{"text":"%md\nCheck out the cheat sheet for [Scala](https://docs.scala-lang.org/cheatsheets/)","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Check out the cheat sheet for <a href=\"https://docs.scala-lang.org/cheatsheets/\">Scala</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055278_866179207","id":"20190426-122620_1929727067","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15645"},{"text":"%md\n## Variables\n### `val` vs. `var`\n\nScala provides two ways to create variables:\n\n*   `val` can *not* be re-assigned once a value has been assigned. \n*   `var` can be re-assigned if the variable type does not change.\n\nThe use of `var` should be avoided as far as possible, especially if the variable defined with `var` can be accessed concurrently.\n\nData types of variables can be inferred.","user":"anonymous","dateUpdated":"2019-05-21T15:21:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Variables</h2>\n<h3><code>val</code> vs. <code>var</code></h3>\n<p>Scala provides two ways to create variables:</p>\n<ul>\n  <li><code>val</code> can <em>not</em> be re-assigned once a value has been assigned.</li>\n  <li><code>var</code> can be re-assigned if the variable type does not change.</li>\n</ul>\n<p>The use of <code>var</code> should be avoided as far as possible, especially if the variable defined with <code>var</code> can be accessed concurrently.</p>\n<p>Data types of variables can be inferred.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055279_-1625650708","id":"20190426-122627_1623027327","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15646","dateFinished":"2019-05-21T15:21:24+0000","dateStarted":"2019-05-21T15:21:24+0000"},{"text":"%spark\n// var with type annotation\nvar hello: String = \"Hello World!\"\n\n// var with inferred type\nvar car = \"Coupe, Van\"","user":"anonymous","dateUpdated":"2019-05-21T15:23:37+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hello: String = Hello World!\ncar: String = Coupe, Van\n"}]},"apps":[],"jobName":"paragraph_1558452055279_580383075","id":"20190426-122633_384216405","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15647","dateFinished":"2019-05-21T15:21:32+0000","dateStarted":"2019-05-21T15:21:32+0000"},{"text":"%spark\n// var reassigned\nhello = \"Hallo Welt!\"","user":"anonymous","dateUpdated":"2019-05-21T15:23:39+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hello: String = Hallo Welt!\n"}]},"apps":[],"jobName":"paragraph_1558452055279_-669993559","id":"20190426-122638_1042140505","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15648","dateFinished":"2019-05-21T15:21:51+0000","dateStarted":"2019-05-21T15:21:51+0000"},{"text":"%spark\n// val with type annotation\nval hello: String = \"Hello World!\"\n\n// val with inferred type\nval car = \"Coupe, Van\"","user":"anonymous","dateUpdated":"2019-05-21T15:23:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hello: String = Hello World!\ncar: String = Coupe, Van\n"}]},"apps":[],"jobName":"paragraph_1558452055285_-864914878","id":"20190426-122707_439025322","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15649","dateFinished":"2019-05-21T15:21:53+0000","dateStarted":"2019-05-21T15:21:53+0000"},{"text":"%spark\n// Reassigning a val is not possible\nhello = \"Hallo Welt!\"","user":"anonymous","dateUpdated":"2019-05-21T15:23:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:26: error: reassignment to val\n       hello = \"Hallo Welt!\"\n             ^\n"}]},"apps":[],"jobName":"paragraph_1558452055285_527651383","id":"20190426-122713_194991131","dateCreated":"2019-05-21T15:20:55+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:15650","dateFinished":"2019-05-21T15:21:55+0000","dateStarted":"2019-05-21T15:21:55+0000"},{"text":"%md\n## Lists and Iterators","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Lists and Iterators</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055285_-2053181136","id":"20190426-122719_1628554479","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15651"},{"text":"%spark\n// Scala\nval numberArray = Array(2,3,57,2,122,42,12)\nval mappedNumbers1 = numberArray.map(_ + 1)\nval numberIterator = numberArray.iterator\nwhile (numberIterator.hasNext) println(numberIterator.next)\n\n// Used in Spark's mapPartitions (and mapPartitionsWithIndex)\nval numberRDD = sc.parallelize(numberArray)\nval mappedNumbers2 = numberRDD.mapPartitions(numbers => numbers.map(_ + 1)).collect","user":"anonymous","dateUpdated":"2019-05-21T15:23:47+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2\n3\n57\n2\n122\n42\n12\nnumberArray: Array[Int] = Array(2, 3, 57, 2, 122, 42, 12)\nmappedNumbers1: Array[Int] = Array(3, 4, 58, 3, 123, 43, 13)\nnumberIterator: Iterator[Int] = empty iterator\nnumberRDD: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[42] at parallelize at <console>:32\nmappedNumbers2: Array[Int] = Array(3, 4, 58, 3, 123, 43, 13)\n"}]},"apps":[],"jobName":"paragraph_1558452055286_-2098201451","id":"20190426-122732_366154030","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15652","dateFinished":"2019-05-21T15:22:12+0000","dateStarted":"2019-05-21T15:22:04+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=10"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Pairs / Tuples","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Pairs / Tuples</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055286_-261176132","id":"20190426-122737_1199490757","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15653"},{"text":"%spark\n// Scala\nval pair = (\"key\", 1)\nval myKey = pair._1\nval myValue = pair._2\n\n// Used in Spark's byKey transformations\nval pairRDD = sc.parallelize(Array((\"key1\", 1), (\"key1\", 2), (\"key2\", 3)))\nval filteredPairRDD = pairRDD.filter(_._2 > 2).collect\nval groupedPairRDD = pairRDD.groupByKey.collect\nval reducedPairRDD = pairRDD.reduceByKey(_ + _).collect","user":"anonymous","dateUpdated":"2019-05-21T15:23:50+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pair: (String, Int) = (key,1)\nmyKey: String = key\nmyValue: Int = 1\npairRDD: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[44] at parallelize at <console>:31\nfilteredPairRDD: Array[(String, Int)] = Array((key2,3))\ngroupedPairRDD: Array[(String, Iterable[Int])] = Array((key1,CompactBuffer(1, 2)), (key2,CompactBuffer(3)))\nreducedPairRDD: Array[(String, Int)] = Array((key1,3), (key2,3))\n"}]},"apps":[],"jobName":"paragraph_1558452055286_80714138","id":"20190426-122757_1156278153","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15654","dateFinished":"2019-05-21T15:22:20+0000","dateStarted":"2019-05-21T15:22:18+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=11","http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=12","http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=13"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Functions\n\n* Functions in Scala are either named or anonymous. Anonymous functions are also called lambda functions.\n\n* Scala does not require the `return` keyword to be used. Instead, a function will return the value of the last expression that evaluates to a value.\n\n* Scala functions generally require type annotations of both the input variables and output variables.\n\n* Scala functions can take and/or return functions. These type of functions are called higher-order functions.\n\n***Named functions:*** A named function is defined using `def`\n\n***Anonymous functions (a.k.a. lambda functions):*** Anonymous functions are defined directly inside a method\n\n","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Functions</h2>\n<ul>\n  <li>\n  <p>Functions in Scala are either named or anonymous. Anonymous functions are also called lambda functions.</p></li>\n  <li>\n  <p>Scala does not require the <code>return</code> keyword to be used. Instead, a function will return the value of the last expression that evaluates to a value.</p></li>\n  <li>\n  <p>Scala functions generally require type annotations of both the input variables and output variables.</p></li>\n  <li>\n  <p>Scala functions can take and/or return functions. These type of functions are called higher-order functions.</p></li>\n</ul>\n<p><strong><em>Named functions:</em></strong> A named function is defined using <code>def</code></p>\n<p><strong><em>Anonymous functions (a.k.a. lambda functions):</em></strong> Anonymous functions are defined directly inside a method</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055292_-387800017","id":"20190426-122806_710757304","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15655"},{"text":"%md\n**Named functions**","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Named functions</strong></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055292_1697226417","id":"20190426-122816_2105678213","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15656"},{"text":"%spark\n// Define a named function - Int here is a type annotation for both x, the input variable, and the output\n\ndef square(x: Int): Int = {\n  x * x\n}\n\nval four = square(2)","user":"anonymous","dateUpdated":"2019-05-21T15:23:52+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"square: (x: Int)Int\nfour: Int = 4\n"}]},"apps":[],"jobName":"paragraph_1558452055293_-1196066969","id":"20190426-122842_1241357057","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15657","dateFinished":"2019-05-21T15:22:25+0000","dateStarted":"2019-05-21T15:22:25+0000"},{"text":"%spark\n// A function can be written without brackets if it fits on one line\n\ndef myFunction(i: Int): Int = i * i\n\nval nine = myFunction(3)","user":"anonymous","dateUpdated":"2019-05-21T15:24:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myFunction: (i: Int)Int\nnine: Int = 9\n"}]},"apps":[],"jobName":"paragraph_1558452055293_258244257","id":"20190426-122848_1397452764","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15658","dateFinished":"2019-05-21T15:24:32+0000","dateStarted":"2019-05-21T15:24:32+0000"},{"text":"%spark\n// Named functions with more than one argument\n\ndef multiply(x: Int, y: Int): Int = x * y\n\nval six: Int = multiply(2, 3)","user":"anonymous","dateUpdated":"2019-05-21T15:24:25+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"multiply: (x: Int, y: Int)Int\nsix: Int = 6\n"}]},"apps":[],"jobName":"paragraph_1558452055294_347861643","id":"20190426-122904_22206172","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15659","dateFinished":"2019-05-21T15:24:26+0000","dateStarted":"2019-05-21T15:24:25+0000"},{"text":"%spark\n// Higher-order functions\n// A function can be passed to other functions and methods, such as 'map'\n\ndef square(x: Int): Int = {\n  x * x\n}\n\nSeq(1, 2, 3).map(square)","user":"anonymous","dateUpdated":"2019-05-21T15:24:20+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"square: (x: Int)Int\nres12: Seq[Int] = List(1, 4, 9)\n"}]},"apps":[],"jobName":"paragraph_1558452055294_-1814886640","id":"20190426-122909_1293595927","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15660","dateFinished":"2019-05-21T15:24:20+0000","dateStarted":"2019-05-21T15:24:20+0000"},{"text":"%md\n**Anonymous functions (a.k.a. lambda functions)**","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Anonymous functions (a.k.a. lambda functions)</strong></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055294_126470600","id":"20190426-122916_246843036","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15661"},{"text":"%spark\n// Scala\nval myList = Array(1,2,3,5,6,8,9)\nval myMappedList1 = myList.map(x => x + 1)\nval myMappedList2 = myList.map(_ + 1)\n\n// Used in every Spark transformation\nval myRDD = sc.parallelize(myList)\nval myMappedListRdd = myRDD.map(_ + 1).collect\nval myFilteredRdd = myRDD.filter(_ > 3).collect\n// and some Spark actions\nval myReducedRdd = myRDD.reduce(_ + _)","user":"anonymous","dateUpdated":"2019-05-21T15:24:05+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myList: Array[Int] = Array(1, 2, 3, 5, 6, 8, 9)\nmyMappedList1: Array[Int] = Array(2, 3, 4, 6, 7, 9, 10)\nmyMappedList2: Array[Int] = Array(2, 3, 4, 6, 7, 9, 10)\nmyRDD: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[48] at parallelize at <console>:31\nmyMappedListRdd: Array[Int] = Array(2, 3, 4, 6, 7, 9, 10)\nmyFilteredRdd: Array[Int] = Array(5, 6, 8, 9)\nmyReducedRdd: Int = 34\n"}]},"apps":[],"jobName":"paragraph_1558452055295_-1754439104","id":"20190426-122922_318920772","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15662","dateFinished":"2019-05-21T15:22:49+0000","dateStarted":"2019-05-21T15:22:48+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=14","http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=15","http://ip-172-31-47-203.eu-central-1.compute.internal:4040/jobs/job?id=16"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Case classes\n\n* Extremely useful when using Scala in Spark 2.x with the new Dataset API\n\n* Very useful to create an individual Dataset structure incl. data types\n\n* Instantiable class\n\n* Extendable with methods for individual use cases\n\n* Arguments of case class represent Dataset columns incl. their data types","user":"anonymous","dateUpdated":"2019-05-21T15:20:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Case classes</h2>\n<ul>\n  <li>\n  <p>Extremely useful when using Scala in Spark 2.x with the new Dataset API</p></li>\n  <li>\n  <p>Very useful to create an individual Dataset structure incl. data types</p></li>\n  <li>\n  <p>Instantiable class</p></li>\n  <li>\n  <p>Extendable with methods for individual use cases</p></li>\n  <li>\n  <p>Arguments of case class represent Dataset columns incl. their data types</p></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558452055295_739162343","id":"20190426-122928_673519597","dateCreated":"2019-05-21T15:20:55+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15663"},{"text":"%spark\n// Defining case class and methode, instatiate case class and apply methode on instance\n\ncase class CC(x: Int) {\n  def add(y: Int): CC = CC(x + y)\n}\n\nval caseClassInstance = CC(5)\nval caseClassResult = caseClassInstance.add(4)\n\ncaseClassResult.add(5)","user":"anonymous","dateUpdated":"2019-05-21T15:24:07+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class CC\ncaseClassInstance: CC = CC(5)\ncaseClassResult: CC = CC(9)\nres8: CC = CC(14)\n"}]},"apps":[],"jobName":"paragraph_1558452055295_984584510","id":"20190426-122936_726923772","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15664","dateFinished":"2019-05-21T15:22:54+0000","dateStarted":"2019-05-21T15:22:53+0000"},{"text":"%spark\ncase class Person(name: String, age: Int, height: Int, weight: Int) {\n  def calculate_body_mass_index(): Double = height + weight\n}\n\nval kevin = Person(\"Kevin\", 42, 73, 170)\n\nkevin.calculate_body_mass_index","user":"anonymous","dateUpdated":"2019-05-21T15:23:02+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Person\nkevin: Person = Person(Kevin,42,73,170)\nres9: Double = 243.0\n"}]},"apps":[],"jobName":"paragraph_1558452055296_-1051908060","id":"20190426-122942_2114822835","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15665","dateFinished":"2019-05-21T15:23:03+0000","dateStarted":"2019-05-21T15:23:02+0000"},{"text":"%spark\n// Spark Datasets are very similar to Sequences of Case Class objects\nval SeqCCs = Seq(CC(1), CC(2), CC(3))\n\nSeqCCs.map(cc => cc.add(2))\n\nSeqCCs.map(_.add(2))","user":"anonymous","dateUpdated":"2019-05-21T15:24:17+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"SeqCCs: Seq[CC] = List(CC(1), CC(2), CC(3))\nres10: Seq[CC] = List(CC(3), CC(4), CC(5))\n"}]},"apps":[],"jobName":"paragraph_1558452055297_150132267","id":"20190426-122959_1527184202","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15666","dateFinished":"2019-05-21T15:23:10+0000","dateStarted":"2019-05-21T15:23:09+0000"},{"text":"%spark\n// An underscore _  can be used to avoid having to provide a variable name, \n//  cc => function(cc) is equivalent to writing function(_)\n\nSeq(CC(1), CC(2), CC(3)).map(_.add(2))","user":"anonymous","dateUpdated":"2019-05-21T15:23:17+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res11: Seq[CC] = List(CC(3), CC(4), CC(5))\n"}]},"apps":[],"jobName":"paragraph_1558452055297_1401180380","id":"20190426-123004_1468450641","dateCreated":"2019-05-21T15:20:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15667","dateFinished":"2019-05-21T15:23:17+0000","dateStarted":"2019-05-21T15:23:17+0000"}],"name":"/6. Exercises/Scala Cheat Sheet","id":"2EDFRQ3P5","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}