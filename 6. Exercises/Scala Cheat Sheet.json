{"paragraphs":[{"text":"%md <img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>","user":"anonymous","dateUpdated":"2019-04-26T12:30:41+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274631768_-1562501195","id":"20190426-123031_1665537052","dateCreated":"2019-04-26T12:30:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19896","dateFinished":"2019-04-26T12:30:41+0200","dateStarted":"2019-04-26T12:30:41+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274372226_-1083317865","id":"20190426-122612_662812292","dateCreated":"2019-04-26T12:26:12+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17244","text":"%md # Scala for Spark Cheat Sheet","dateUpdated":"2019-04-26T12:26:20+0200","dateFinished":"2019-04-26T12:26:20+0200","dateStarted":"2019-04-26T12:26:20+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Scala for Spark Cheat Sheet</h1>\n</div>"}]}},{"text":"%md\nCheck out the cheat sheet for [Scala](https://docs.scala-lang.org/cheatsheets/)","user":"anonymous","dateUpdated":"2019-04-26T12:26:27+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274380166_-1968642310","id":"20190426-122620_1929727067","dateCreated":"2019-04-26T12:26:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17322","dateFinished":"2019-04-26T12:26:27+0200","dateStarted":"2019-04-26T12:26:27+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Check out the cheat sheet for <a href=\"https://docs.scala-lang.org/cheatsheets/\">Scala</a></p>\n</div>"}]}},{"text":"%md\n## Variables\n*** `val` vs. `var`***\n\nScala provides two ways to create variables:\n\n*   `val` can *not* be re-assigned once a value has been assigned. \n*   `var` can be re-assigned if the variable type does not change.\n\nThe use of `var` should be avoided as far as possible, especially if the variable defined with `var` can be accessed concurrently.\n\nData types of variables can be inferred.","user":"anonymous","dateUpdated":"2019-04-26T12:26:33+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274387373_2101881731","id":"20190426-122627_1623027327","dateCreated":"2019-04-26T12:26:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17416","dateFinished":"2019-04-26T12:26:33+0200","dateStarted":"2019-04-26T12:26:33+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Variables</h2>\n<p><strong>* <code>val</code> vs. <code>var</code></strong>*</p>\n<p>Scala provides two ways to create variables:</p>\n<ul>\n  <li><code>val</code> can <em>not</em> be re-assigned once a value has been assigned.</li>\n  <li><code>var</code> can be re-assigned if the variable type does not change.</li>\n</ul>\n<p>The use of <code>var</code> should be avoided as far as possible, especially if the variable defined with <code>var</code> can be accessed concurrently.</p>\n<p>Data types of variables can be inferred.</p>\n</div>"}]}},{"text":"%spark\n//var with type annotation\nvar hello: String = \"Hello World!\"\n\n//var with inferred type\nvar car = \"Coupe, Van\"","user":"anonymous","dateUpdated":"2019-04-26T12:26:51+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274393742_1852499149","id":"20190426-122633_384216405","dateCreated":"2019-04-26T12:26:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17506","dateFinished":"2019-04-26T12:26:51+0200","dateStarted":"2019-04-26T12:26:51+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hello: String = Hello World!\ncar: String = Coupe, Van\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274398942_899844284","id":"20190426-122638_1042140505","dateCreated":"2019-04-26T12:26:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17596","text":"//var reassigned\nhello = \"Hallo Welt!\"","dateUpdated":"2019-04-26T12:27:07+0200","dateFinished":"2019-04-26T12:27:07+0200","dateStarted":"2019-04-26T12:27:07+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hello: String = Hallo Welt!\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274427726_-1604938416","id":"20190426-122707_439025322","dateCreated":"2019-04-26T12:27:07+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17739","text":"//val with type annotation\nval hello: String = \"Hello World!\"\n\n//val with inferred type\nval car = \"Coupe, Van\"","dateUpdated":"2019-04-26T12:27:13+0200","dateFinished":"2019-04-26T12:27:13+0200","dateStarted":"2019-04-26T12:27:13+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"hello: String = Hello World!\ncar: String = Coupe, Van\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274433518_1816924668","id":"20190426-122713_194991131","dateCreated":"2019-04-26T12:27:13+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17836","text":"//Reassigning a val is not possible\nhello = \"Hallo Welt!\"","dateUpdated":"2019-04-26T12:27:19+0200","dateFinished":"2019-04-26T12:27:19+0200","dateStarted":"2019-04-26T12:27:19+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:26: error: reassignment to val\n       hello = \"Hallo Welt!\"\n             ^\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274439878_1746788422","id":"20190426-122719_1628554479","dateCreated":"2019-04-26T12:27:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17933","text":"%md\n## Lists and Iterators","dateUpdated":"2019-04-26T12:27:32+0200","dateFinished":"2019-04-26T12:27:32+0200","dateStarted":"2019-04-26T12:27:32+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Lists and Iterators</h2>\n</div>"}]}},{"text":"%spark\n//Scala\nval numberArray = Array(2,3,57,2,122,42,12)\nval mappedNumbers1 = numberArray.map(_ + 1)\nval numberIterator = numberArray.iterator\nwhile (numberIterator.hasNext) println(numberIterator.next)\n\n//Used in Spark's mapPartitions (and mapPartitionsWithIndex)\nval numberRDD = sc.parallelize(numberArray)\nval mappedNumbers2 = numberRDD.mapPartitions(numbers => numbers.map(_ + 1)).collect","user":"anonymous","dateUpdated":"2019-04-26T12:27:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274452047_-580727883","id":"20190426-122732_366154030","dateCreated":"2019-04-26T12:27:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18022","dateFinished":"2019-04-26T12:27:47+0200","dateStarted":"2019-04-26T12:27:46+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2\n3\n57\n2\n122\n42\n12\nnumberArray: Array[Int] = Array(2, 3, 57, 2, 122, 42, 12)\nmappedNumbers1: Array[Int] = Array(3, 4, 58, 3, 123, 43, 13)\nnumberIterator: Iterator[Int] = empty iterator\nnumberRDD: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[2] at parallelize at <console>:36\nmappedNumbers2: Array[Int] = Array(3, 4, 58, 3, 123, 43, 13)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.178.200:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274457551_1703401861","id":"20190426-122737_1199490757","dateCreated":"2019-04-26T12:27:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18112","text":"%md\n## Pairs / Tuples","dateUpdated":"2019-04-26T12:27:57+0200","dateFinished":"2019-04-26T12:27:57+0200","dateStarted":"2019-04-26T12:27:57+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Pairs / Tuples</h2>\n</div>"}]}},{"text":"%spark\n//Scala\nval pair = (\"key\", 1)\nval myKey = pair._1\nval myValue = pair._2\n\n//Used in Spark's byKey transformations\nval pairRDD = sc.parallelize(Array((\"key1\", 1), (\"key1\", 2), (\"key2\", 3)))\nval filteredPairRDD = pairRDD.filter(_._2 > 2).collect\nval groupedPairRDD = pairRDD.groupByKey.collect\nval reducedPairRDD = pairRDD.reduceByKey(_ + _).collect","user":"anonymous","dateUpdated":"2019-04-26T12:28:06+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274477622_859499656","id":"20190426-122757_1156278153","dateCreated":"2019-04-26T12:27:57+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18280","dateFinished":"2019-04-26T12:28:07+0200","dateStarted":"2019-04-26T12:28:06+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pair: (String, Int) = (key,1)\nmyKey: String = key\nmyValue: Int = 1\npairRDD: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[4] at parallelize at <console>:31\nfilteredPairRDD: Array[(String, Int)] = Array((key2,3))\ngroupedPairRDD: Array[(String, Iterable[Int])] = Array((key2,CompactBuffer(3)), (key1,CompactBuffer(1, 2)))\nreducedPairRDD: Array[(String, Int)] = Array((key2,3), (key1,3))\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.178.200:4040/jobs/job?id=2","http://192.168.178.200:4040/jobs/job?id=3","http://192.168.178.200:4040/jobs/job?id=4"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Functions\n\n* Functions in Scala are either named or anonymous. Anonymous functions are also called lambda functions.\n\n* Scala does not require the `return` keyword to be used. Instead, a function will return the value of the last expression that evaluates to a value.\n\n* Scala functions generally require type annotations of both the input variables and output variables.\n\n* Scala functions can take and/or return functions. These type of functions are called higher-order functions.\n\n***Named functions:*** A named function is defined using `def`\n\n***Anonymous functions (a.k.a. lambda functions):*** Anonymous functions are defined directly inside a method\n\n","user":"anonymous","dateUpdated":"2019-04-26T12:28:35+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274486615_-1428697007","id":"20190426-122806_710757304","dateCreated":"2019-04-26T12:28:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18369","dateFinished":"2019-04-26T12:28:35+0200","dateStarted":"2019-04-26T12:28:35+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Functions</h2>\n<ul>\n  <li>\n  <p>Functions in Scala are either named or anonymous. Anonymous functions are also called lambda functions.</p></li>\n  <li>\n  <p>Scala does not require the <code>return</code> keyword to be used. Instead, a function will return the value of the last expression that evaluates to a value.</p></li>\n  <li>\n  <p>Scala functions generally require type annotations of both the input variables and output variables.</p></li>\n  <li>\n  <p>Scala functions can take and/or return functions. These type of functions are called higher-order functions.</p></li>\n</ul>\n<p><strong><em>Named functions:</em></strong> A named function is defined using <code>def</code></p>\n<p><strong><em>Anonymous functions (a.k.a. lambda functions):</em></strong> Anonymous functions are defined directly inside a method</p>\n</div>"}]}},{"text":"%md\n**Named functions**","user":"anonymous","dateUpdated":"2019-04-26T12:28:42+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274496303_1270616809","id":"20190426-122816_2105678213","dateCreated":"2019-04-26T12:28:16+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18489","dateFinished":"2019-04-26T12:28:42+0200","dateStarted":"2019-04-26T12:28:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Named functions</strong></p>\n</div>"}]}},{"text":"%spark\n//Define a named function - Int here is a type annotation for both x, the input variable, and the output\n\ndef square(x: Int): Int = {\n  x * x\n}\n\nval four = square(2)","user":"anonymous","dateUpdated":"2019-04-26T12:28:56+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274522407_-950009006","id":"20190426-122842_1241357057","dateCreated":"2019-04-26T12:28:42+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18646","dateFinished":"2019-04-26T12:28:56+0200","dateStarted":"2019-04-26T12:28:56+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"square: (x: Int)Int\nfour: Int = 4\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274528279_-2136152742","id":"20190426-122848_1397452764","dateCreated":"2019-04-26T12:28:48+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18736","text":"//A function can be written without brackets if it fits on one line\n\ndef myFunction(i: Int): Int = i * i\n\nval nine = myFunction(3)","dateUpdated":"2019-04-26T12:29:04+0200","dateFinished":"2019-04-26T12:29:04+0200","dateStarted":"2019-04-26T12:29:04+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myFunction: (i: Int)Int\nnine: Int = 9\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274544271_959235326","id":"20190426-122904_22206172","dateCreated":"2019-04-26T12:29:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18870","text":"//Named functions with more than one argument\n\ndef multiply(x: Int, y: Int): Int = x * y\n\nval six: Int = multiply(2, 3)","dateUpdated":"2019-04-26T12:29:09+0200","dateFinished":"2019-04-26T12:29:10+0200","dateStarted":"2019-04-26T12:29:09+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"multiply: (x: Int, y: Int)Int\nsix: Int = 6\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274549871_-1531940730","id":"20190426-122909_1293595927","dateCreated":"2019-04-26T12:29:09+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18967","text":"//Higher-order functions\n//A function can be passed to other functions and methods, such as 'map'\n\ndef square(x: Int): Int = {\n  x * x\n}\n\nSeq(1, 2, 3).map(square)","dateUpdated":"2019-04-26T12:29:16+0200","dateFinished":"2019-04-26T12:29:16+0200","dateStarted":"2019-04-26T12:29:16+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"square: (x: Int)Int\nres1: Seq[Int] = List(1, 4, 9)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274556623_312676492","id":"20190426-122916_246843036","dateCreated":"2019-04-26T12:29:16+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19064","text":"%md\n**Anonymous functions (a.k.a. lambda functions)**","dateUpdated":"2019-04-26T12:29:22+0200","dateFinished":"2019-04-26T12:29:22+0200","dateStarted":"2019-04-26T12:29:22+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Anonymous functions (a.k.a. lambda functions)</strong></p>\n</div>"}]}},{"text":"%spark\n//Scala\nval myList = Array(1,2,3,5,6,8,9)\nval myMappedList1 = myList.map(x => x + 1)\nval myMappedList2 = myList.map(_ + 1)\n\n//Used in every Spark transformation\nval myRDD = sc.parallelize(myList)\nval myMappedListRdd = myRDD.map(_ + 1).collect\nval myFilteredRdd = myRDD.filter(_ > 3).collect\n//and some Spark actions\nval myReducedRdd = myRDD.reduce(_ + _)","user":"anonymous","dateUpdated":"2019-04-26T12:29:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274562799_-1719690149","id":"20190426-122922_318920772","dateCreated":"2019-04-26T12:29:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19162","dateFinished":"2019-04-26T12:29:29+0200","dateStarted":"2019-04-26T12:29:28+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myList: Array[Int] = Array(1, 2, 3, 5, 6, 8, 9)\nmyMappedList1: Array[Int] = Array(2, 3, 4, 6, 7, 9, 10)\nmyMappedList2: Array[Int] = Array(2, 3, 4, 6, 7, 9, 10)\nmyRDD: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[8] at parallelize at <console>:31\nmyMappedListRdd: Array[Int] = Array(2, 3, 4, 6, 7, 9, 10)\nmyFilteredRdd: Array[Int] = Array(5, 6, 8, 9)\nmyReducedRdd: Int = 34\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.178.200:4040/jobs/job?id=5","http://192.168.178.200:4040/jobs/job?id=6","http://192.168.178.200:4040/jobs/job?id=7"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Case classes\n\n* Extremely useful when using Scala in Spark 2.x with the new Dataset API\n\n* Very useful to create an individual Dataset structure incl. data types\n\n* Instantiable class\n\n* Extendable with methods for individual use cases\n\n* Arguments of case class represent Dataset columns incl. their data types","user":"anonymous","dateUpdated":"2019-04-26T12:29:36+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274568695_-501625642","id":"20190426-122928_673519597","dateCreated":"2019-04-26T12:29:28+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19251","dateFinished":"2019-04-26T12:29:36+0200","dateStarted":"2019-04-26T12:29:36+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Case classes</h2>\n<ul>\n  <li>\n  <p>Extremely useful when using Scala in Spark 2.x with the new Dataset API</p></li>\n  <li>\n  <p>Very useful to create an individual Dataset structure incl. data types</p></li>\n  <li>\n  <p>Instantiable class</p></li>\n  <li>\n  <p>Extendable with methods for individual use cases</p></li>\n  <li>\n  <p>Arguments of case class represent Dataset columns incl. their data types</p></li>\n</ul>\n</div>"}]}},{"text":"%spark\n//Defining case class and methode, instatiate case class and apply methode on instance\n\ncase class CC(x: Int) {\n  def add(y: Int): CC = CC(x + y)\n}\n\nval caseClassInstance = CC(5)\nval caseClassResult = caseClassInstance.add(4)\n\ncaseClassResult.add(5)","user":"anonymous","dateUpdated":"2019-04-26T12:29:51+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274576584_958670137","id":"20190426-122936_726923772","dateCreated":"2019-04-26T12:29:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19369","dateFinished":"2019-04-26T12:29:52+0200","dateStarted":"2019-04-26T12:29:51+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class CC\ncaseClassInstance: CC = CC(5)\ncaseClassResult: CC = CC(9)\nres3: CC = CC(14)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274582559_285493888","id":"20190426-122942_2114822835","dateCreated":"2019-04-26T12:29:42+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19459","text":"case class Person(name: String, age: Int, height: Int, weight: Int) {\n  def calculate_body_mass_index(): Double = height + weight\n}\n\nval kevin = Person(\"Kevin\", 42, 73, 170)\n\nkevin.calculate_body_mass_index","dateUpdated":"2019-04-26T12:29:59+0200","dateFinished":"2019-04-26T12:29:59+0200","dateStarted":"2019-04-26T12:29:59+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Person\nkevin: Person = Person(Kevin,42,73,170)\nres4: Double = 243.0\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274599208_2146782315","id":"20190426-122959_1527184202","dateCreated":"2019-04-26T12:29:59+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19596","text":"//Spark Datasets are very similar to Sequences of Case Class objects\nval SeqCCs = Seq(CC(1), CC(2), CC(3))\n\nSeqCCs.map(cc => cc.add(2))\n\nSeqCCs.map(_.add(2))","dateUpdated":"2019-04-26T12:30:04+0200","dateFinished":"2019-04-26T12:30:04+0200","dateStarted":"2019-04-26T12:30:04+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"SeqCCs: Seq[CC] = List(CC(1), CC(2), CC(3))\nres5: Seq[CC] = List(CC(3), CC(4), CC(5))\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556274604552_772740247","id":"20190426-123004_1468450641","dateCreated":"2019-04-26T12:30:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19693","text":"// An underscore _  can be used to avoid having to provide a variable name, \n//  cc => function(cc) is equivalent to writing function(_)\n\nSeq(CC(1), CC(2), CC(3)).map(_.add(2))","dateUpdated":"2019-04-26T12:30:10+0200","dateFinished":"2019-04-26T12:30:10+0200","dateStarted":"2019-04-26T12:30:10+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res6: Seq[CC] = List(CC(3), CC(4), CC(5))\n"}]}}],"name":"/6. Exercises/Scala Cheat Sheet","id":"2E9H24PSY","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}