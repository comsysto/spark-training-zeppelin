{"paragraphs":[{"text":"%md <img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>","user":"anonymous","dateUpdated":"2019-04-26T11:33:08+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1556271115663_1709426270","id":"20190426-113155_114074266","dateCreated":"2019-04-26T11:31:55+0200","dateStarted":"2019-04-26T11:33:08+0200","dateFinished":"2019-04-26T11:33:11+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1442"},{"text":"%md\n# Exercise 1 - Introduction\n\nWe start with the typical hello world application in Spark.","user":"anonymous","dateUpdated":"2019-04-26T11:33:26+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Exercise 1 - Introduction</h1>\n<p>We start with the typical hello world application in Spark.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556271188906_-1550911370","id":"20190426-113308_1229970381","dateCreated":"2019-04-26T11:33:08+0200","dateStarted":"2019-04-26T11:33:22+0200","dateFinished":"2019-04-26T11:33:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1443"},{"text":"%md\n***Task 1.1***\nLoad the following sentences into a RDD: `Spark I am your father`, `May the Spark be with you`, `May Spark live long and prosper`. Split the sentences into words. Use `map` and `flatMap`. What is the difference?\n\n***Task 1.2***\nCount the number of occurences of each word over all sentences using a RDD.","user":"anonymous","dateUpdated":"2019-04-26T11:33:32+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 1.1</em></strong><br/>Load the following sentences into a RDD: <code>Spark I am your father</code>, <code>May the Spark be with you</code>, <code>May Spark live long and prosper</code>. Split the sentences into words. Use <code>map</code> and <code>flatMap</code>. What is the difference?</p>\n<p><strong><em>Task 1.2</em></strong><br/>Count the number of occurences of each word over all sentences using a RDD.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556271202584_1060866836","id":"20190426-113322_1813938306","dateCreated":"2019-04-26T11:33:22+0200","dateStarted":"2019-04-26T11:33:32+0200","dateFinished":"2019-04-26T11:33:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1444"},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:33:56+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1556271212800_-500411676","id":"20190426-113332_1873038629","dateCreated":"2019-04-26T11:33:32+0200","dateStarted":"2019-04-26T11:33:56+0200","dateFinished":"2019-04-26T11:34:00+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1445"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271219000_-1182641641","id":"20190426-113339_1584127901","dateCreated":"2019-04-26T11:33:39+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1446","text":"%md\n### Solution 1.1 a","dateUpdated":"2019-04-26T11:35:40+0200","dateFinished":"2019-04-26T11:35:40+0200","dateStarted":"2019-04-26T11:35:40+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 1.1 a</h3>\n</div>"}]}},{"text":"%python\nfrom __future__ import print_function\n\nsentencesRDD = sc.parallelize([\"Spark I am your father\", \"May the spark be with you\", \"Spark I am your father\"])\nwordsMapRDD = sentencesRDD.map(lambda sentence: sentence.split(' '))\nprint(*wordsMapRDD.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:36:18+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271340640_-689093186","id":"20190426-113540_221796011","dateCreated":"2019-04-26T11:35:40+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1832","dateFinished":"2019-04-26T11:36:18+0200","dateStarted":"2019-04-26T11:36:18+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'sc' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'sc' is not defined\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271350792_-782009496","id":"20190426-113550_1500407253","dateCreated":"2019-04-26T11:35:50+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1923","text":"%md\n### Solution 1.1 b","dateUpdated":"2019-04-26T11:37:59+0200","dateFinished":"2019-04-26T11:37:59+0200","dateStarted":"2019-04-26T11:37:59+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 1.1 b</h3>\n</div>"}]}},{"text":"%python\nwordsFlatMapRDD = sentencesRDD.flatMap(lambda sentence: sentence.split(' '))\nprint(*wordsFlatMapRDD.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:38:11+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271479040_-1372677046","id":"20190426-113759_826886351","dateCreated":"2019-04-26T11:37:59+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2057","dateFinished":"2019-04-26T11:38:11+0200","dateStarted":"2019-04-26T11:38:11+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sentencesRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sentencesRDD' is not defined\n\n"}]}},{"text":"%md\n### Solution 1.2","user":"anonymous","dateUpdated":"2019-04-26T11:38:29+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271491680_2003660065","id":"20190426-113811_769294062","dateCreated":"2019-04-26T11:38:11+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2146","dateFinished":"2019-04-26T11:38:29+0200","dateStarted":"2019-04-26T11:38:29+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 1.2</h3>\n</div>"}]}},{"text":"%python\nwordCount = wordsFlatMapRDD.map(lambda word: (word, 1)).reduceByKey(lambda accum, addMe: accum + addMe).sortBy(lambda x: x[0])\nprint(*wordCount.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:38:37+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271509321_-1822716232","id":"20190426-113829_569194761","dateCreated":"2019-04-26T11:38:29+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2235","dateFinished":"2019-04-26T11:38:37+0200","dateStarted":"2019-04-26T11:38:37+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'wordsFlatMapRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'wordsFlatMapRDD' is not defined\n\n"}]}},{"text":"%md\n# Exercise 2 - Operations and actions\n\nThis exercise we will focus on transformations and actions using different APIs.\n\nWe will deal with a snapshot of the million songs dataset containing only 1000 rows.","user":"anonymous","dateUpdated":"2019-04-26T11:38:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271517849_-1774410890","id":"20190426-113837_348868411","dateCreated":"2019-04-26T11:38:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2324","dateFinished":"2019-04-26T11:38:46+0200","dateStarted":"2019-04-26T11:38:46+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Exercise 2 - Operations and actions</h1>\n<p>This exercise we will focus on transformations and actions using different APIs.</p>\n<p>We will deal with a snapshot of the million songs dataset containing only 1000 rows.</p>\n</div>"}]}},{"text":"%md\n***Task 2.0 a***\nUse `mapPartitions` to split the `sentencesRDD` out of exercise 1 without flattening it.\n\n***Task 2.0 b***\nUse `mapPartitionsWithIndex` to split the `sentencesRDD` out of exercise 1 without flattening it.","user":"anonymous","dateUpdated":"2019-04-26T11:38:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271526553_-1919259998","id":"20190426-113846_1729498002","dateCreated":"2019-04-26T11:38:46+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2413","dateFinished":"2019-04-26T11:38:52+0200","dateStarted":"2019-04-26T11:38:52+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 2.0 a</em></strong><br/>Use <code>mapPartitions</code> to split the <code>sentencesRDD</code> out of exercise 1 without flattening it.</p>\n<p><strong><em>Task 2.0 b</em></strong><br/>Use <code>mapPartitionsWithIndex</code> to split the <code>sentencesRDD</code> out of exercise 1 without flattening it.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:39:03+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271532761_1529243524","id":"20190426-113852_707093913","dateCreated":"2019-04-26T11:38:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2503","dateFinished":"2019-04-26T11:39:03+0200","dateStarted":"2019-04-26T11:39:03+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 2.0 a","user":"anonymous","dateUpdated":"2019-04-26T11:39:17+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271543649_517526988","id":"20190426-113903_2071583017","dateCreated":"2019-04-26T11:39:03+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2592","dateFinished":"2019-04-26T11:39:17+0200","dateStarted":"2019-04-26T11:39:17+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.0 a</h3>\n</div>"}]}},{"text":"%python\nwordCountWithPartitions = sentencesRDD.mapPartitions(lambda partition: [word.split(' ') for word in partition])\nprint(*wordCountWithPartitions.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:39:27+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271556985_-1854329537","id":"20190426-113916_550287079","dateCreated":"2019-04-26T11:39:16+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2665","dateFinished":"2019-04-26T11:39:27+0200","dateStarted":"2019-04-26T11:39:27+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sentencesRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sentencesRDD' is not defined\n\n"}]}},{"text":"%md\n### Solution 2.0 b","user":"anonymous","dateUpdated":"2019-04-26T11:39:45+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271567761_667020024","id":"20190426-113927_1324182421","dateCreated":"2019-04-26T11:39:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2754","dateFinished":"2019-04-26T11:39:45+0200","dateStarted":"2019-04-26T11:39:45+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.0 b</h3>\n</div>"}]}},{"text":"%python\nwordCountWithPartitionsWithIdx = sentencesRDD.mapPartitionsWithIndex(lambda idx, partition: [(word.split(' '), idx) for word in partition])\nprint(*wordCountWithPartitionsWithIdx.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:39:53+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271585265_579326316","id":"20190426-113945_1098213291","dateCreated":"2019-04-26T11:39:45+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2843","dateFinished":"2019-04-26T11:39:53+0200","dateStarted":"2019-04-26T11:39:53+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sentencesRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sentencesRDD' is not defined\n\n"}]}},{"text":"%md\n***Task 2.1***\nWe will deal with a snapshot of the million songs dataset containing only 1000 rows. Explore the data using appropriate actions like `count`, `show`, `printSchema`, `first` or `take` of the RDD API and the DataFrame API.","user":"anonymous","dateUpdated":"2019-04-26T11:40:00+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271593473_1510557838","id":"20190426-113953_324893766","dateCreated":"2019-04-26T11:39:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2932","dateFinished":"2019-04-26T11:40:00+0200","dateStarted":"2019-04-26T11:40:00+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 2.1</em></strong><br/>We will deal with a snapshot of the million songs dataset containing only 1000 rows. Explore the data using appropriate actions like <code>count</code>, <code>show</code>, <code>printSchema</code>, <code>first</code> or <code>take</code> of the RDD API and the DataFrame API.</p>\n</div>"}]}},{"text":"%python\ndataPath = r'dbfs:/cs-spark-training/millionSongs1000/millionSongs1000.csv'\nmillionSongsDF = spark.read.csv(dataPath, header=True, inferSchema=True)\nmillionSongsRDD = millionSongsDF.rdd.map(tuple)","user":"anonymous","dateUpdated":"2019-04-26T11:40:12+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271600553_1391046937","id":"20190426-114000_1369220237","dateCreated":"2019-04-26T11:40:00+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3021","dateFinished":"2019-04-26T11:40:12+0200","dateStarted":"2019-04-26T11:40:12+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'spark' is not defined\n\n"}]}},{"text":"%python\n# Please add your solution in here\nprint('Number of Rows: ' + )\nprint('Sneak Preview: ' + )\n\n# print first 5 lines\n","user":"anonymous","dateUpdated":"2019-04-26T11:40:22+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271612242_-871598767","id":"20190426-114012_1603350459","dateCreated":"2019-04-26T11:40:12+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3110","dateFinished":"2019-04-26T11:40:22+0200","dateStarted":"2019-04-26T11:40:22+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 295, in <module>\n    code = compile('\\n'.join(final_code), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)\n  File \"<stdin>\", line 1\n    print('Number of Rows: ' + )\n                               ^\nSyntaxError: invalid syntax\n"}]}},{"text":"%md\n### Solution 2.1 RDD API","user":"anonymous","dateUpdated":"2019-04-26T11:40:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271622593_-1988571697","id":"20190426-114022_810211037","dateCreated":"2019-04-26T11:40:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3198","dateFinished":"2019-04-26T11:40:52+0200","dateStarted":"2019-04-26T11:40:52+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.1 RDD API</h3>\n</div>"}]}},{"text":"%python\nprint('Number of Rows: {}'.format(millionSongsRDD.count()))\nprint('Sneak Preview:\\n{}'.format(millionSongsRDD.take(5)))","user":"anonymous","dateUpdated":"2019-04-26T11:41:00+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271652153_-455315924","id":"20190426-114052_1733315463","dateCreated":"2019-04-26T11:40:52+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3287","dateFinished":"2019-04-26T11:41:00+0200","dateStarted":"2019-04-26T11:41:00+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\n"}]}},{"text":"%python\n# Please add your solution in here\nprint('Schema:' + )\n\nprint('Number of Rows: '+ )\n\nprint('Show:' + )\n\nprint('Describe: '+ )\n","user":"anonymous","dateUpdated":"2019-04-26T11:41:16+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271660241_-1675227611","id":"20190426-114100_1310494594","dateCreated":"2019-04-26T11:41:00+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3376","dateFinished":"2019-04-26T11:41:16+0200","dateStarted":"2019-04-26T11:41:16+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 295, in <module>\n    code = compile('\\n'.join(final_code), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)\n  File \"<stdin>\", line 1\n    print('Schema:' + )\n                      ^\nSyntaxError: invalid syntax\n"}]}},{"text":"%md\n### Solution 2.1 DataFrame API","user":"anonymous","dateUpdated":"2019-04-26T11:41:33+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271676945_-1031572270","id":"20190426-114116_2080546143","dateCreated":"2019-04-26T11:41:16+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3464","dateFinished":"2019-04-26T11:41:33+0200","dateStarted":"2019-04-26T11:41:33+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.1 DataFrame API</h3>\n</div>"}]}},{"text":"%python\nprint('(Inferred) Schema:\\n')\nmillionSongsDF.printSchema()\n\nprint('Number of Rows: {}\\n'.format(millionSongsDF.count()))\n\nprint('Show:\\n')\nmillionSongsDF.show(5)\n\nprint('...and some statistics:\\n')\nmillionSongsDF.describe().show()","user":"anonymous","dateUpdated":"2019-04-26T11:41:45+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271693225_798684573","id":"20190426-114133_1360285495","dateCreated":"2019-04-26T11:41:33+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3553","dateFinished":"2019-04-26T11:41:45+0200","dateStarted":"2019-04-26T11:41:45+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"(Inferred) Schema:\n\n"},{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'millionSongsDF' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'millionSongsDF' is not defined\n\n"}]}},{"text":"%md\n***Task 2.2***\nFind out which artist has the most songs in the millionSongs dataset. Use the RDD API on `millionSongsRDD` and the DataFrame API on `millionSongsDF`. Identify the operations and actions!","user":"anonymous","dateUpdated":"2019-04-26T11:41:56+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271705130_1563024411","id":"20190426-114145_368902187","dateCreated":"2019-04-26T11:41:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3642","dateFinished":"2019-04-26T11:41:56+0200","dateStarted":"2019-04-26T11:41:56+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 2.2</em></strong><br/>Find out which artist has the most songs in the millionSongs dataset. Use the RDD API on <code>millionSongsRDD</code> and the DataFrame API on <code>millionSongsDF</code>. Identify the operations and actions!</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:42:06+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271715986_2065796749","id":"20190426-114155_2052057753","dateCreated":"2019-04-26T11:41:55+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3747","dateFinished":"2019-04-26T11:42:06+0200","dateStarted":"2019-04-26T11:42:06+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 2.2 RDD API","user":"anonymous","dateUpdated":"2019-04-26T11:42:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271726234_1407788090","id":"20190426-114206_1508261156","dateCreated":"2019-04-26T11:42:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3836","dateFinished":"2019-04-26T11:42:28+0200","dateStarted":"2019-04-26T11:42:28+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.2 RDD API</h3>\n</div>"}]}},{"text":"%python\nfrom __future__ import print_function\nsongCountByArtistRDD = millionSongsRDD.map(lambda song: (song[0], 1)).reduceByKey(lambda accum, addMe: accum+addMe).sortBy(lambda song: song[1], ascending = False)\n\nprint(*songCountByArtistRDD.collect(), sep = '\\n') # action","user":"anonymous","dateUpdated":"2019-04-26T11:42:38+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271748258_-409556103","id":"20190426-114228_324173337","dateCreated":"2019-04-26T11:42:28+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3909","dateFinished":"2019-04-26T11:42:38+0200","dateStarted":"2019-04-26T11:42:38+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\n"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:42:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271758306_-1133027827","id":"20190426-114238_100209508","dateCreated":"2019-04-26T11:42:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3998","dateFinished":"2019-04-26T11:42:52+0200","dateStarted":"2019-04-26T11:42:52+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 2.2 DataFrame API","user":"anonymous","dateUpdated":"2019-04-26T11:43:06+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271772922_-1550678289","id":"20190426-114252_2026192604","dateCreated":"2019-04-26T11:42:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4086","dateFinished":"2019-04-26T11:43:06+0200","dateStarted":"2019-04-26T11:43:06+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.2 DataFrame API</h3>\n</div>"}]}},{"text":"%python\nfrom pyspark.sql.functions import desc\nsongCountByArtistDF = millionSongsDF.groupBy('artist').count().sort(desc('count'))\n\nsongCountByArtistDF.show() #action","user":"anonymous","dateUpdated":"2019-04-26T11:43:14+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271786297_1345691332","id":"20190426-114306_1061276923","dateCreated":"2019-04-26T11:43:06+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4159","dateFinished":"2019-04-26T11:43:14+0200","dateStarted":"2019-04-26T11:43:14+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'pyspark'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'pyspark'\n\n"}]}},{"text":"%md\n***Task 2.3***\nCompute the average loudness for each artist and each year with the RDD API as well as the DataFrame API. Ignore years with value = 0.","user":"anonymous","dateUpdated":"2019-04-26T11:43:21+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271794906_1412571160","id":"20190426-114314_435390900","dateCreated":"2019-04-26T11:43:14+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4248","dateFinished":"2019-04-26T11:43:21+0200","dateStarted":"2019-04-26T11:43:21+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 2.3</em></strong><br/>Compute the average loudness for each artist and each year with the RDD API as well as the DataFrame API. Ignore years with value = 0.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:43:30+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271801890_-2117869096","id":"20190426-114321_1384742673","dateCreated":"2019-04-26T11:43:21+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4337","dateFinished":"2019-04-26T11:43:30+0200","dateStarted":"2019-04-26T11:43:30+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 2.3 RDD API","user":"anonymous","dateUpdated":"2019-04-26T11:43:51+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271810435_-2108983990","id":"20190426-114330_649732537","dateCreated":"2019-04-26T11:43:30+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4426","dateFinished":"2019-04-26T11:43:51+0200","dateStarted":"2019-04-26T11:43:51+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.3 RDD API</h3>\n</div>"}]}},{"text":"%python\nmeanOfList = lambda myList: reduce(lambda accum, addMe: accum + addMe, myList)/len(myList)\n\nloudnessByArtistYearRDD = millionSongsRDD.filter(lambda song: song[1] > 0).map(lambda song: ((song[0], song[1]), song[2])).groupByKey().mapValues(meanOfList).sortBy(lambda song: song[1])\n\nprint(*loudnessByArtistYearRDD.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:44:13+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271831202_863940233","id":"20190426-114351_93325692","dateCreated":"2019-04-26T11:43:51+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4499","dateFinished":"2019-04-26T11:44:13+0200","dateStarted":"2019-04-26T11:44:13+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\n"}]}},{"text":"%md\n***Task 2.4***\nTry to improve the performance of the previous RDD task by using `reduceByKey`.","user":"anonymous","dateUpdated":"2019-04-26T11:44:25+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271853378_-2086684738","id":"20190426-114413_1167407947","dateCreated":"2019-04-26T11:44:13+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4588","dateFinished":"2019-04-26T11:44:25+0200","dateStarted":"2019-04-26T11:44:25+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 2.4</em></strong><br/>Try to improve the performance of the previous RDD task by using <code>reduceByKey</code>.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:44:42+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271865051_1017380441","id":"20190426-114425_110700691","dateCreated":"2019-04-26T11:44:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4677","dateFinished":"2019-04-26T11:44:42+0200","dateStarted":"2019-04-26T11:44:42+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 2.4","user":"anonymous","dateUpdated":"2019-04-26T11:44:56+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271882873_1788692896","id":"20190426-114442_1773625899","dateCreated":"2019-04-26T11:44:42+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4766","dateFinished":"2019-04-26T11:44:56+0200","dateStarted":"2019-04-26T11:44:56+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 2.4</h3>\n</div>"}]}},{"text":"%python\nloudnessByArtistYearRBK = millionSongsRDD.filter(lambda song: song[1] > 0).map(lambda song: ((song[0], song[1]), (song[2], 1))).reduceByKey(lambda accum, addMe: (accum[0] + addMe[0], accum[1] + addMe[1])).map(lambda song: (song[0], song[1][0] / song[1][1])).sortBy(lambda song: song[-1])\n\nprint(*loudnessByArtistYearRBK.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:45:04+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271896795_-1786722748","id":"20190426-114456_1173923550","dateCreated":"2019-04-26T11:44:56+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4839","dateFinished":"2019-04-26T11:45:04+0200","dateStarted":"2019-04-26T11:45:04+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'millionSongsRDD' is not defined\n\n"}]}},{"text":"%md\n***Task 2.5***\nInvestigate the Web UI by observing the Event Timeline and the DAGs of the last exercises.","user":"anonymous","dateUpdated":"2019-04-26T11:45:13+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271904626_107653616","id":"20190426-114504_1262690075","dateCreated":"2019-04-26T11:45:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4928","dateFinished":"2019-04-26T11:45:13+0200","dateStarted":"2019-04-26T11:45:13+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 2.5</em></strong><br/>Investigate the Web UI by observing the Event Timeline and the DAGs of the last exercises.</p>\n</div>"}]}},{"text":"%md\n# Exercise 3 - Ingestion and saving\n\nIn this exercise we will become familiar with general aspects of data ingestion and saving.\n\nWe will deal with a snapshot of the NYC Taxi dataset containing only 100 rows.","user":"anonymous","dateUpdated":"2019-04-26T11:45:21+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271913251_-89987074","id":"20190426-114513_1560706809","dateCreated":"2019-04-26T11:45:13+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5017","dateFinished":"2019-04-26T11:45:21+0200","dateStarted":"2019-04-26T11:45:21+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Exercise 3 - Ingestion and saving</h1>\n<p>In this exercise we will become familiar with general aspects of data ingestion and saving.</p>\n<p>We will deal with a snapshot of the NYC Taxi dataset containing only 100 rows.</p>\n</div>"}]}},{"text":"%md\n***Task 3.1***\nLoad a DataFrame from a blank-delimited CSV file (***dbfs:/cs-spark-training/exercises/chapter3/***) containing a snapshot of the NYC Taxi dataset. Compare the infered data types of the snapshot with the corresponding columns of the complete dataset. Are there differences?","user":"anonymous","dateUpdated":"2019-04-26T11:46:43+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556271921099_643742627","id":"20190426-114521_2006042763","dateCreated":"2019-04-26T11:45:21+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5107","dateFinished":"2019-04-26T11:46:43+0200","dateStarted":"2019-04-26T11:46:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 3.1</em></strong><br/>Load a DataFrame from a blank-delimited CSV file (***dbfs:/cs-spark-training/exercises/chapter3/***) containing a snapshot of the NYC Taxi dataset. Compare the infered data types of the snapshot with the corresponding columns of the complete dataset. Are there differences?</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:46:53+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272003419_1839584903","id":"20190426-114643_770859394","dateCreated":"2019-04-26T11:46:43+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5197","dateFinished":"2019-04-26T11:46:53+0200","dateStarted":"2019-04-26T11:46:53+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 3.1","user":"anonymous","dateUpdated":"2019-04-26T11:47:08+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272013803_-1586848122","id":"20190426-114653_1763111690","dateCreated":"2019-04-26T11:46:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5286","dateFinished":"2019-04-26T11:47:08+0200","dateStarted":"2019-04-26T11:47:08+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 3.1</h3>\n</div>"}]}},{"text":"%python\ndataPath = r'dbfs:/cs-spark-training/exercises/chapter3/'\n\ntaxiSnap = spark.read.option(\"header\", True).option(\"inferSchema\", True).option(\"delimiter\", \" \").csv(dataPath)\ntaxiSnap.printSchema()  # with schema inferring only 'pickup_datetime' has a wrong data type\ntaxiSnap.show()","user":"anonymous","dateUpdated":"2019-04-26T11:47:17+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272028212_-958729616","id":"20190426-114708_2070506577","dateCreated":"2019-04-26T11:47:08+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5359","dateFinished":"2019-04-26T11:47:17+0200","dateStarted":"2019-04-26T11:47:17+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\nNameError: name 'spark' is not defined\n\n"}]}},{"text":"%md\n***Task 3.2***\nIn case of wrong inferred data types correct them manually and load the file again with corrected data types.","user":"anonymous","dateUpdated":"2019-04-26T11:47:30+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272037099_2018209579","id":"20190426-114717_302575124","dateCreated":"2019-04-26T11:47:17+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5448","dateFinished":"2019-04-26T11:47:30+0200","dateStarted":"2019-04-26T11:47:30+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 3.2</em></strong><br/>In case of wrong inferred data types correct them manually and load the file again with corrected data types.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:47:40+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272050410_-1664299085","id":"20190426-114730_2028527486","dateCreated":"2019-04-26T11:47:30+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5537","dateFinished":"2019-04-26T11:47:40+0200","dateStarted":"2019-04-26T11:47:40+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 3.2","user":"anonymous","dateUpdated":"2019-04-26T11:47:59+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272060221_1983254814","id":"20190426-114740_1876929644","dateCreated":"2019-04-26T11:47:40+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5626","dateFinished":"2019-04-26T11:47:59+0200","dateStarted":"2019-04-26T11:47:59+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 3.2</h3>\n</div>"}]}},{"text":"%python\nfrom pyspark.sql.types import *\n\n# looks like pyspark has trouble converting the pickup_datetime to Timestamp during csv loading\n# mySchema = StructType([\n#  StructField('brand', StringType()),\n#  StructField('rate_code', IntegerType()),\n#  StructField('pickup_datetime', TimestampType()), \n#  StructField('trip_distance', DoubleType()),\n#  StructField('store_and_fwd_flag', StringType())\n# ])\n\n# hence, we fix it after loading\ntaxiSnapshot = taxiSnap.withColumn('pickup_datetime', taxiSnap['pickup_datetime'].cast(TimestampType()))\ntaxiSnapshot.printSchema()\ntaxiSnapshot.show()","user":"anonymous","dateUpdated":"2019-04-26T11:48:31+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272079796_2004449160","id":"20190426-114759_1526011862","dateCreated":"2019-04-26T11:47:59+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5699","dateFinished":"2019-04-26T11:48:31+0200","dateStarted":"2019-04-26T11:48:31+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'pyspark'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'pyspark'\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272085764_-656368316","id":"20190426-114805_2116631019","dateCreated":"2019-04-26T11:48:05+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5789","text":"%md\n***Task 3.3***\nSave the corrected DataFrame to your directory as a Parquet file and partition it by ***rate_code***. Additionally make sure you can save your file no matter if there already exists one. Afterwards have a look into the directory you saved the file to. What can you see?","dateUpdated":"2019-04-26T11:49:05+0200","dateFinished":"2019-04-26T11:49:05+0200","dateStarted":"2019-04-26T11:49:05+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 3.3</em></strong><br/>Save the corrected DataFrame to your directory as a Parquet file and partition it by <strong><em>rate_code</em></strong>. Additionally make sure you can save your file no matter if there already exists one. Afterwards have a look into the directory you saved the file to. What can you see?</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:49:12+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272144996_762940524","id":"20190426-114904_915342060","dateCreated":"2019-04-26T11:49:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5923","dateFinished":"2019-04-26T11:49:12+0200","dateStarted":"2019-04-26T11:49:12+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 3.3","user":"anonymous","dateUpdated":"2019-04-26T11:49:26+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272152508_858984040","id":"20190426-114912_1709288510","dateCreated":"2019-04-26T11:49:12+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6012","dateFinished":"2019-04-26T11:49:26+0200","dateStarted":"2019-04-26T11:49:26+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 3.3</h3>\n</div>"}]}},{"text":"%python\ntaxiSnapshot.write.partitionBy('store_and_fwd_flag', 'rate_code').mode('overwrite').save('dbfs:/cs-spark-training/test2/')","user":"anonymous","dateUpdated":"2019-04-26T11:49:36+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272166203_-2061762481","id":"20190426-114926_45623322","dateCreated":"2019-04-26T11:49:26+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6085","dateFinished":"2019-04-26T11:49:36+0200","dateStarted":"2019-04-26T11:49:36+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiSnapshot' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiSnapshot' is not defined\n\n"}]}},{"text":"%md\n***Task 3.4***\nMake yourself familiar with the `.basePath` option. For more information about this option please have a look [here](https://spark.apache.org/docs/latest/sql-programming-guide.html#partition-discovery).\nAfter your familiar with the `.basePath` option please read in your previously saved snapshot of the NYC Taxi dataset in two different ways:\n1. Read in the files as DataFrame again by using the `.basePath` option which ***excludes*** the subdirectory *store_and_fwd_flag* and subsequent subdirectories.\n2. Read in the files as DataFrame again by using the `.basePath` option which ***includes*** the subdirectory *store_and_fwd_flag*.","user":"anonymous","dateUpdated":"2019-04-26T11:50:06+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272176436_-1139869661","id":"20190426-114936_684814812","dateCreated":"2019-04-26T11:49:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6174","dateFinished":"2019-04-26T11:50:06+0200","dateStarted":"2019-04-26T11:50:06+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 3.4</em></strong><br/>Make yourself familiar with the <code>.basePath</code> option. For more information about this option please have a look <a href=\"https://spark.apache.org/docs/latest/sql-programming-guide.html#partition-discovery\">here</a>.<br/>After your familiar with the <code>.basePath</code> option please read in your previously saved snapshot of the NYC Taxi dataset in two different ways:<br/>1. Read in the files as DataFrame again by using the <code>.basePath</code> option which <strong><em>excludes</em></strong> the subdirectory <em>store_and_fwd_flag</em> and subsequent subdirectories.<br/>2. Read in the files as DataFrame again by using the <code>.basePath</code> option which <strong><em>includes</em></strong> the subdirectory <em>store_and_fwd_flag</em>.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:50:15+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272206404_-532987987","id":"20190426-115006_930161589","dateCreated":"2019-04-26T11:50:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6266","dateFinished":"2019-04-26T11:50:16+0200","dateStarted":"2019-04-26T11:50:16+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 3.4","user":"anonymous","dateUpdated":"2019-04-26T11:50:43+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272215971_-368531864","id":"20190426-115015_1786384562","dateCreated":"2019-04-26T11:50:15+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6355","dateFinished":"2019-04-26T11:50:43+0200","dateStarted":"2019-04-26T11:50:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 3.4</h3>\n</div>"}]}},{"text":"%python\nimport os\n\nfirstBasePath = r'dbfs:/cs-spark-training/test2/'\nfirst = spark.read.option('basePath', firstBasePath).load(r'dbfs:/cs-spark-training/test2/store_and_fwd_flag=B/')\nfirst.printSchema()\n\nsecondBasePath = os.path.join(firstBasePath, 'store_and_fwd_flag=B/')\nsecond = spark.read.option('basePath', secondBasePath).load(r'dbfs:/cs-spark-training/test2/store_and_fwd_flag=B/')\nsecond.printSchema()","user":"anonymous","dateUpdated":"2019-04-26T11:50:56+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272243268_-944416406","id":"20190426-115043_1918291128","dateCreated":"2019-04-26T11:50:43+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6428","dateFinished":"2019-04-26T11:50:56+0200","dateStarted":"2019-04-26T11:50:56+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'spark' is not defined\n\n"}]}},{"text":"%md\n***Task 3.5***\nTry to ingest in-memory data as Datasets and RDDs","user":"anonymous","dateUpdated":"2019-04-26T11:51:06+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272256500_-374181314","id":"20190426-115056_33549502","dateCreated":"2019-04-26T11:50:56+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6517","dateFinished":"2019-04-26T11:51:06+0200","dateStarted":"2019-04-26T11:51:06+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 3.5</em></strong><br/>Try to ingest in-memory data as Datasets and RDDs</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:51:22+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272266476_1865812576","id":"20190426-115106_307301910","dateCreated":"2019-04-26T11:51:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6606","dateFinished":"2019-04-26T11:51:22+0200","dateStarted":"2019-04-26T11:51:22+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 3.5","user":"anonymous","dateUpdated":"2019-04-26T11:51:39+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272282795_-1114911580","id":"20190426-115122_2026650478","dateCreated":"2019-04-26T11:51:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6695","dateFinished":"2019-04-26T11:51:39+0200","dateStarted":"2019-04-26T11:51:39+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 3.5</h3>\n</div>"}]}},{"text":"%python\nmySchema = StructType([\n StructField('brand', StringType()),\n StructField('model', StringType()),\n StructField('fourWheeler', BooleanType())\n])\n\nmyData = [\n  ('Dacia', 'Duster', True),\n  ('BMW', 'Isetta', False),\n  ('Yamaha', 'YZF-R1M', False)\n]\n\nfleetDF = spark.createDataFrame(myData, schema = mySchema)\nfleetDF.show()\n\nfleetRDD = sc.parallelize(myData)\nprint(*fleetRDD.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T11:51:47+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272299932_-573035411","id":"20190426-115139_1179394565","dateCreated":"2019-04-26T11:51:39+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6768","dateFinished":"2019-04-26T11:51:47+0200","dateStarted":"2019-04-26T11:51:47+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'StructType' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'StructType' is not defined\n\n"}]}},{"text":"%md\n# Exercise 4 - Spark SQL\n\nIn this exercise we will become familiar with Spark SQL structured data processing.\n\nSee also the offical [Spark SQL programming guide](https://spark.apache.org/docs/latest/sql-programming-guide.html).\n\nData: *New York City Taxi Dataset*, 22 MB zipped Parquets with overall 999,999 rows","user":"anonymous","dateUpdated":"2019-04-26T11:51:59+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272307805_732383652","id":"20190426-115147_353449463","dateCreated":"2019-04-26T11:51:47+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6857","dateFinished":"2019-04-26T11:51:59+0200","dateStarted":"2019-04-26T11:51:59+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Exercise 4 - Spark SQL</h1>\n<p>In this exercise we will become familiar with Spark SQL structured data processing.</p>\n<p>See also the offical <a href=\"https://spark.apache.org/docs/latest/sql-programming-guide.html\">Spark SQL programming guide</a>.</p>\n<p>Data: <em>New York City Taxi Dataset</em>, 22 MB zipped Parquets with overall 999,999 rows</p>\n</div>"}]}},{"text":"%md\n##### Setup basics\nPlease run the subsequent paragraph to setup the basics before you proceed with the tasks.","user":"anonymous","dateUpdated":"2019-04-26T11:52:09+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272319445_13881502","id":"20190426-115159_347123654","dateCreated":"2019-04-26T11:51:59+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6946","dateFinished":"2019-04-26T11:52:09+0200","dateStarted":"2019-04-26T11:52:09+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h5>Setup basics</h5>\n<p>Please run the subsequent paragraph to setup the basics before you proceed with the tasks.</p>\n</div>"}]}},{"text":"%run \"/cs-spark-training/connect_s3\"","user":"anonymous","dateUpdated":"2019-04-26T11:52:21+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272326133_1009448519","id":"20190426-115206_1611865638","dateCreated":"2019-04-26T11:52:06+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7036","errorMessage":"org.apache.zeppelin.interpreter.InterpreterNotFoundException: Either no interpreter named run or it is not binded to this note\n\tat org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter(InterpreterFactory.java:101)\n\tat org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter(Paragraph.java:242)\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:350)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:683)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1881)\n\tat org.apache.zeppelin.socket.NotebookServer.runParagraph(NotebookServer.java:1840)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:262)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:189)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:66)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:158)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:162)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:459)\n\tat org.eclipse.jetty.websocket.common.extensions.AbstractExtension.nextIncomingFrame(AbstractExtension.java:182)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:105)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.CompressExtension.forwardIncoming(CompressExtension.java:142)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.incomingFrame(PerMessageDeflateExtension.java:85)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:219)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:244)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:559)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:390)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)\n\tat org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)\n\tat org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683)\n\tat java.lang.Thread.run(Thread.java:748)\n","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"org.apache.zeppelin.interpreter.InterpreterNotFoundException: Either no interpreter named run or it is not binded to this note"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272338493_1953803539","id":"20190426-115218_103627136","dateCreated":"2019-04-26T11:52:18+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7149","text":"%md\n***Task 4.1***\nLoad the data in a DataFrame and infer the schema automatically.\nUse the databricks command `display()` to visualize the DataFrame.","dateUpdated":"2019-04-26T11:52:35+0200","dateFinished":"2019-04-26T11:52:35+0200","dateStarted":"2019-04-26T11:52:35+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.1</em></strong><br/>Load the data in a DataFrame and infer the schema automatically.<br/>Use the databricks command <code>display()</code> to visualize the DataFrame.</p>\n</div>"}]}},{"text":"%python\ntaxiDataPath = 's3a://bigpicture-guild/nyctaxi/sample_1_month/parquet/'","user":"anonymous","dateUpdated":"2019-04-26T11:52:45+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272355229_-1568033863","id":"20190426-115235_1432749415","dateCreated":"2019-04-26T11:52:35+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7254","dateFinished":"2019-04-26T11:52:45+0200","dateStarted":"2019-04-26T11:52:45+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:52:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272365733_71575004","id":"20190426-115245_1225209014","dateCreated":"2019-04-26T11:52:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7343","dateFinished":"2019-04-26T11:52:52+0200","dateStarted":"2019-04-26T11:52:52+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 4.1","user":"anonymous","dateUpdated":"2019-04-26T11:53:07+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272372805_40970611","id":"20190426-115252_375727088","dateCreated":"2019-04-26T11:52:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7415","dateFinished":"2019-04-26T11:53:07+0200","dateStarted":"2019-04-26T11:53:07+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.1</h3>\n</div>"}]}},{"text":"%python\ntaxiDfEmptyCol = spark.read.parquet(taxiDataPath)\ndisplay(taxiDfEmptyCol)","user":"anonymous","dateUpdated":"2019-04-26T11:53:15+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272387036_1159906100","id":"20190426-115307_999355881","dateCreated":"2019-04-26T11:53:07+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7488","dateFinished":"2019-04-26T11:53:15+0200","dateStarted":"2019-04-26T11:53:15+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\n"}]}},{"text":"%md\n***Task 4.2***\nAfter observing the DataFrame you should see that there is a column without any name. Provide this column with the name *payment_type* by using `.withColumnRenamed`. Additionally check the schema of the DataFrame and count the rows.","user":"anonymous","dateUpdated":"2019-04-26T11:53:25+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272395557_520909005","id":"20190426-115315_309545530","dateCreated":"2019-04-26T11:53:15+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7577","dateFinished":"2019-04-26T11:53:25+0200","dateStarted":"2019-04-26T11:53:25+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.2</em></strong><br/>After observing the DataFrame you should see that there is a column without any name. Provide this column with the name <em>payment_type</em> by using <code>.withColumnRenamed</code>. Additionally check the schema of the DataFrame and count the rows.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:53:37+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272405693_1710003351","id":"20190426-115325_100485639","dateCreated":"2019-04-26T11:53:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7666","dateFinished":"2019-04-26T11:53:37+0200","dateStarted":"2019-04-26T11:53:37+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 4.2","user":"anonymous","dateUpdated":"2019-04-26T11:53:47+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272417437_-73799150","id":"20190426-115337_1442209122","dateCreated":"2019-04-26T11:53:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7755","dateFinished":"2019-04-26T11:53:47+0200","dateStarted":"2019-04-26T11:53:47+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.2</h3>\n</div>"}]}},{"text":"%python\ntaxiDataDF = taxiDfEmptyCol.withColumnRenamed('','payment_type')\n\n# check if we need to change data types\ntaxiDataDF.printSchema()\n\n# number of rows 999,999\ntaxiDataDF.count()","user":"anonymous","dateUpdated":"2019-04-26T11:53:55+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272427309_1276702215","id":"20190426-115347_267186050","dateCreated":"2019-04-26T11:53:47+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7828","dateFinished":"2019-04-26T11:53:55+0200","dateStarted":"2019-04-26T11:53:55+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiDfEmptyCol' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiDfEmptyCol' is not defined\n\n"}]}},{"text":"%md \n***Task 4.3***\nEven though the schema is correct, let's try to change \"pickup_datetime\" to a unix timestamp temporarily","user":"anonymous","dateUpdated":"2019-04-26T11:54:03+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272435789_-1996089195","id":"20190426-115355_111477295","dateCreated":"2019-04-26T11:53:55+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7917","dateFinished":"2019-04-26T11:54:03+0200","dateStarted":"2019-04-26T11:54:03+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.3</em></strong><br/>Even though the schema is correct, let&rsquo;s try to change &ldquo;pickup_datetime&rdquo; to a unix timestamp temporarily</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:54:10+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272443107_929494108","id":"20190426-115403_432846929","dateCreated":"2019-04-26T11:54:03+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8006","dateFinished":"2019-04-26T11:54:10+0200","dateStarted":"2019-04-26T11:54:10+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 4.3","user":"anonymous","dateUpdated":"2019-04-26T11:54:25+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272450477_-1640294622","id":"20190426-115410_1358348778","dateCreated":"2019-04-26T11:54:10+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8095","dateFinished":"2019-04-26T11:54:25+0200","dateStarted":"2019-04-26T11:54:25+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.3</h3>\n</div>"}]}},{"text":"%python\ntaxiDataDF.withColumn('pickup_datetime', taxiDataDF['pickup_datetime'].cast(\"integer\")).printSchema()","user":"anonymous","dateUpdated":"2019-04-26T11:54:37+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272465526_237651974","id":"20190426-115425_1465239858","dateCreated":"2019-04-26T11:54:25+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8168","dateFinished":"2019-04-26T11:54:37+0200","dateStarted":"2019-04-26T11:54:37+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiDataDF' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiDataDF' is not defined\n\n"}]}},{"text":"%md\n***Task 4.4***\nCreate a temporary view of the taxi DataFrame.","user":"anonymous","dateUpdated":"2019-04-26T11:54:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272477046_1497543366","id":"20190426-115437_1725660206","dateCreated":"2019-04-26T11:54:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8257","dateFinished":"2019-04-26T11:54:46+0200","dateStarted":"2019-04-26T11:54:46+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.4</em></strong><br/>Create a temporary view of the taxi DataFrame.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:54:54+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272486357_-1329506990","id":"20190426-115446_1116307462","dateCreated":"2019-04-26T11:54:46+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8346","dateFinished":"2019-04-26T11:54:54+0200","dateStarted":"2019-04-26T11:54:54+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 4.4","user":"anonymous","dateUpdated":"2019-04-26T11:55:09+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272494078_715809764","id":"20190426-115454_916643717","dateCreated":"2019-04-26T11:54:54+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8435","dateFinished":"2019-04-26T11:55:09+0200","dateStarted":"2019-04-26T11:55:09+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.4</h3>\n</div>"}]}},{"text":"%python\ntaxiDataDF.createOrReplaceTempView('taxidata')","user":"anonymous","dateUpdated":"2019-04-26T11:55:19+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272509654_-676054125","id":"20190426-115509_1740482036","dateCreated":"2019-04-26T11:55:09+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8508","dateFinished":"2019-04-26T11:55:19+0200","dateStarted":"2019-04-26T11:55:19+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiDataDF' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiDataDF' is not defined\n\n"}]}},{"text":"%md\n***Task 4.5***\nSelect all tips smaller 14 and greater 0.01 and fares smaller 60 by using SQL and visualize the outcome with a scatter plot.","user":"anonymous","dateUpdated":"2019-04-26T11:55:27+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272519021_1812576668","id":"20190426-115519_1151782660","dateCreated":"2019-04-26T11:55:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8597","dateFinished":"2019-04-26T11:55:27+0200","dateStarted":"2019-04-26T11:55:27+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.5</em></strong><br/>Select all tips smaller 14 and greater 0.01 and fares smaller 60 by using SQL and visualize the outcome with a scatter plot.</p>\n</div>"}]}},{"text":"%sql\n-- Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:58:00+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272527774_-2041033585","id":"20190426-115527_1902468745","dateCreated":"2019-04-26T11:55:27+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8686","dateFinished":"2019-04-26T11:58:00+0200","dateStarted":"2019-04-26T11:58:00+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nno viable alternative at input '<EOF>'(line 1, pos 35)\n\n== SQL ==\n-- Please add your solution in here\n-----------------------------------^^^\n\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n### Solution 4.5","user":"anonymous","dateUpdated":"2019-04-26T11:56:15+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272547933_545560699","id":"20190426-115547_423695264","dateCreated":"2019-04-26T11:55:47+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8775","dateFinished":"2019-04-26T11:56:15+0200","dateStarted":"2019-04-26T11:56:15+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.5</h3>\n</div>"}]}},{"text":"%sql\nSELECT tip_amount, fare_amount FROM taxidata WHERE tip_amount < 14.0 AND tip_amount > 0.01 AND fare_amount < 60.0","user":"anonymous","dateUpdated":"2019-04-26T11:56:21+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272575558_1399231799","id":"20190426-115615_890024844","dateCreated":"2019-04-26T11:56:15+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8873","dateFinished":"2019-04-26T11:56:22+0200","dateStarted":"2019-04-26T11:56:21+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: taxidata; line 1 pos 36\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n***Task 4.6***\nCalculate the correlation between tips greater 0.01 and smaller 14 as well as the fare smaller 60. ","user":"anonymous","dateUpdated":"2019-04-26T11:57:05+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272581894_-1627661471","id":"20190426-115621_842801666","dateCreated":"2019-04-26T11:56:21+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8962","dateFinished":"2019-04-26T11:57:05+0200","dateStarted":"2019-04-26T11:57:05+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.6</em></strong><br/>Calculate the correlation between tips greater 0.01 and smaller 14 as well as the fare smaller 60.</p>\n</div>"}]}},{"text":"%sql\n-- Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:58:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272625494_1583696073","id":"20190426-115705_1791422238","dateCreated":"2019-04-26T11:57:05+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9060","dateFinished":"2019-04-26T11:58:28+0200","dateStarted":"2019-04-26T11:58:28+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nno viable alternative at input '<EOF>'(line 1, pos 35)\n\n== SQL ==\n-- Please add your solution in here\n-----------------------------------^^^\n\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n### Solution 4.6","user":"anonymous","dateUpdated":"2019-04-26T11:58:55+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272638742_-1085652047","id":"20190426-115718_414067807","dateCreated":"2019-04-26T11:57:18+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9149","dateFinished":"2019-04-26T11:58:55+0200","dateStarted":"2019-04-26T11:58:55+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.6</h3>\n</div>"}]}},{"text":"%sql\nSELECT CORR(tip_amount, fare_amount) FROM taxidata WHERE tip_amount BETWEEN 0.01 AND 14.0 AND fare_amount < 60.0","user":"anonymous","dateUpdated":"2019-04-26T11:59:18+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272735607_-471150475","id":"20190426-115855_237128008","dateCreated":"2019-04-26T11:58:55+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9318","dateFinished":"2019-04-26T11:59:18+0200","dateStarted":"2019-04-26T11:59:18+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: taxidata; line 1 pos 42\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n***Task 4.7***\nQuery the average tip amount by passenger count for tips greater than 0 and sort it by average tip amount.","user":"anonymous","dateUpdated":"2019-04-26T11:59:29+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272754607_1495765552","id":"20190426-115914_1255703469","dateCreated":"2019-04-26T11:59:14+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9407","dateFinished":"2019-04-26T11:59:29+0200","dateStarted":"2019-04-26T11:59:29+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.7</em></strong><br/>Query the average tip amount by passenger count for tips greater than 0 and sort it by average tip amount.</p>\n</div>"}]}},{"text":"%sql\n-- Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T11:59:44+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272769478_328826987","id":"20190426-115929_812434132","dateCreated":"2019-04-26T11:59:29+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9512","dateFinished":"2019-04-26T11:59:44+0200","dateStarted":"2019-04-26T11:59:44+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nno viable alternative at input '<EOF>'(line 1, pos 35)\n\n== SQL ==\n-- Please add your solution in here\n-----------------------------------^^^\n\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n### Solution 4.7","user":"anonymous","dateUpdated":"2019-04-26T11:59:58+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272784293_-225717868","id":"20190426-115944_1757246088","dateCreated":"2019-04-26T11:59:44+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9601","dateFinished":"2019-04-26T11:59:58+0200","dateStarted":"2019-04-26T11:59:58+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.7</h3>\n</div>"}]}},{"text":"%sql\nSELECT passenger_count, AVG(tip_amount) AS average_tip FROM taxidata WHERE tip_amount > 0.0 GROUP BY passenger_count ORDER BY average_tip DESC","user":"anonymous","dateUpdated":"2019-04-26T12:00:04+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272798351_1906546401","id":"20190426-115958_867138658","dateCreated":"2019-04-26T11:59:58+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9690","dateFinished":"2019-04-26T12:00:04+0200","dateStarted":"2019-04-26T12:00:04+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: taxidata; line 1 pos 60\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n***Task 4.8***\nQuery the percentage tips of fares by payment type for tips greater 0 and sort it by percentage.","user":"anonymous","dateUpdated":"2019-04-26T12:00:19+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272804447_-1199581733","id":"20190426-120004_1992028028","dateCreated":"2019-04-26T12:00:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9779","dateFinished":"2019-04-26T12:00:19+0200","dateStarted":"2019-04-26T12:00:19+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.8</em></strong><br/>Query the percentage tips of fares by payment type for tips greater 0 and sort it by percentage.</p>\n</div>"}]}},{"text":"%sql\n-- Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T12:00:27+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272819110_754486244","id":"20190426-120019_600765624","dateCreated":"2019-04-26T12:00:19+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9868","dateFinished":"2019-04-26T12:00:27+0200","dateStarted":"2019-04-26T12:00:27+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nno viable alternative at input '<EOF>'(line 1, pos 35)\n\n== SQL ==\n-- Please add your solution in here\n-----------------------------------^^^\n\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n### Solution 4.8","user":"anonymous","dateUpdated":"2019-04-26T12:00:42+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272827215_1103481867","id":"20190426-120027_1777901921","dateCreated":"2019-04-26T12:00:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9957","dateFinished":"2019-04-26T12:00:42+0200","dateStarted":"2019-04-26T12:00:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.8</h3>\n</div>"}]}},{"text":"%sql\nSELECT payment_type, AVG(tip_amount), AVG(fare_amount), (AVG(tip_amount) / AVG(fare_amount))*100 AS tip_percent FROM taxidata WHERE tip_amount > 0.0 GROUP BY payment_type ORDER BY tip_percent DESC ","user":"anonymous","dateUpdated":"2019-04-26T12:00:51+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272842088_-599607053","id":"20190426-120042_1923366668","dateCreated":"2019-04-26T12:00:42+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10046","dateFinished":"2019-04-26T12:00:51+0200","dateStarted":"2019-04-26T12:00:51+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: taxidata; line 1 pos 117\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n***Task 4.9***\nQuery the total amount of trips and the average distance per hour (0 until 23) on basis of the pickup time.","user":"anonymous","dateUpdated":"2019-04-26T12:01:00+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272851247_76708171","id":"20190426-120051_1594281766","dateCreated":"2019-04-26T12:00:51+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10135","dateFinished":"2019-04-26T12:01:00+0200","dateStarted":"2019-04-26T12:01:00+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 4.9</em></strong><br/>Query the total amount of trips and the average distance per hour (0 until 23) on basis of the pickup time.</p>\n</div>"}]}},{"text":"%sql\n-- Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T12:01:08+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272860743_-1238659480","id":"20190426-120100_797276502","dateCreated":"2019-04-26T12:01:00+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10224","dateFinished":"2019-04-26T12:01:08+0200","dateStarted":"2019-04-26T12:01:08+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nno viable alternative at input '<EOF>'(line 1, pos 35)\n\n== SQL ==\n-- Please add your solution in here\n-----------------------------------^^^\n\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n### Solution 4.9","user":"anonymous","dateUpdated":"2019-04-26T12:01:22+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272868687_792841006","id":"20190426-120108_1765115561","dateCreated":"2019-04-26T12:01:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10313","dateFinished":"2019-04-26T12:01:22+0200","dateStarted":"2019-04-26T12:01:22+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 4.9</h3>\n</div>"}]}},{"text":"%sql\nSELECT HOUR(pickup_datetime) AS hour, AVG(trip_distance) AS avg_dist, COUNT(*) AS count FROM taxidata GROUP BY HOUR(pickup_datetime) ORDER BY avg_dist DESC","user":"anonymous","dateUpdated":"2019-04-26T12:01:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272882151_-268756613","id":"20190426-120122_860793362","dateCreated":"2019-04-26T12:01:22+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10402","dateFinished":"2019-04-26T12:01:28+0200","dateStarted":"2019-04-26T12:01:28+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: taxidata; line 1 pos 93\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]}},{"text":"%md\n# Exercise 5 - Performance tuning\n\nIn this exercise we will become familiar with the most common optimization techniques in Spark.\n\nOnce again we will use the *New York City Taxi Dataset* (22 MB zipped parquet files with 999,999 rows)","user":"anonymous","dateUpdated":"2019-04-26T12:01:36+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272888831_41925736","id":"20190426-120128_942230135","dateCreated":"2019-04-26T12:01:28+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10491","dateFinished":"2019-04-26T12:01:36+0200","dateStarted":"2019-04-26T12:01:36+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Exercise 5 - Performance tuning</h1>\n<p>In this exercise we will become familiar with the most common optimization techniques in Spark.</p>\n<p>Once again we will use the <em>New York City Taxi Dataset</em> (22 MB zipped parquet files with 999,999 rows)</p>\n</div>"}]}},{"text":"%md\n***Task 5.1***\nLoad NYC Taxi dataset again into a DataFrame and count the amount of rows the dataset is containing. Afterwards repeat this task but this time with caching the DataFrame.","user":"anonymous","dateUpdated":"2019-04-26T12:01:42+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272896488_265266707","id":"20190426-120136_1822387923","dateCreated":"2019-04-26T12:01:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10580","dateFinished":"2019-04-26T12:01:42+0200","dateStarted":"2019-04-26T12:01:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.1</em></strong><br/>Load NYC Taxi dataset again into a DataFrame and count the amount of rows the dataset is containing. Afterwards repeat this task but this time with caching the DataFrame.</p>\n</div>"}]}},{"text":"%md\n***Task 5.1.1***\nLoad NYC Taxi dataset into DataFrame and count it without caching. Notice the duration the count is taking.","user":"anonymous","dateUpdated":"2019-04-26T12:01:48+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272902816_72764075","id":"20190426-120142_396581584","dateCreated":"2019-04-26T12:01:42+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10670","dateFinished":"2019-04-26T12:01:48+0200","dateStarted":"2019-04-26T12:01:48+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.1.1</em></strong><br/>Load NYC Taxi dataset into DataFrame and count it without caching. Notice the duration the count is taking.</p>\n</div>"}]}},{"text":"%python\n# Load the NYC Taxi dataset into a DataFrame\n","user":"anonymous","dateUpdated":"2019-04-26T12:02:04+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272908832_1370390178","id":"20190426-120148_251085277","dateCreated":"2019-04-26T12:01:48+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10760","dateFinished":"2019-04-26T12:02:04+0200","dateStarted":"2019-04-26T12:02:04+0200","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272915816_-1637312007","id":"20190426-120155_1116300576","dateCreated":"2019-04-26T12:01:55+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10849","text":"%python\n# Count the amount of rows of this DataFrame\n","dateUpdated":"2019-04-26T12:02:19+0200","dateFinished":"2019-04-26T12:02:20+0200","dateStarted":"2019-04-26T12:02:20+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 5.1.1","user":"anonymous","dateUpdated":"2019-04-26T12:02:30+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272939975_-379068539","id":"20190426-120219_1269096368","dateCreated":"2019-04-26T12:02:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10937","dateFinished":"2019-04-26T12:02:30+0200","dateStarted":"2019-04-26T12:02:30+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 5.1.1</h3>\n</div>"}]}},{"text":"%python\ntaxi = spark.read.load('s3a://bigpicture-guild/nyctaxi/sample_1_month/parquet/')","user":"anonymous","dateUpdated":"2019-04-26T12:02:47+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272950904_1191285561","id":"20190426-120230_1777258684","dateCreated":"2019-04-26T12:02:30+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11010","dateFinished":"2019-04-26T12:02:47+0200","dateStarted":"2019-04-26T12:02:47+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\n"}]}},{"text":"%python\ntaxi.count()","user":"anonymous","dateUpdated":"2019-04-26T12:02:54+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272967359_1405884889","id":"20190426-120247_2090882905","dateCreated":"2019-04-26T12:02:47+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11099","dateFinished":"2019-04-26T12:02:54+0200","dateStarted":"2019-04-26T12:02:54+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxi' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxi' is not defined\n\n"}]}},{"text":"%md\n***Task 5.1.2***\nNow load the same dataset into a second DataFrame and count it again. Notice the duration of the second count and compare it with the first count.","user":"anonymous","dateUpdated":"2019-04-26T12:03:08+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272974848_-1568959259","id":"20190426-120254_1152832021","dateCreated":"2019-04-26T12:02:54+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11187","dateFinished":"2019-04-26T12:03:08+0200","dateStarted":"2019-04-26T12:03:08+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.1.2</em></strong><br/>Now load the same dataset into a second DataFrame and count it again. Notice the duration of the second count and compare it with the first count.</p>\n</div>"}]}},{"text":"%python\n# Load the same dataset into a second DataFrame\n","user":"anonymous","dateUpdated":"2019-04-26T12:03:18+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272983040_1096880583","id":"20190426-120303_47438194","dateCreated":"2019-04-26T12:03:03+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11276","dateFinished":"2019-04-26T12:03:18+0200","dateStarted":"2019-04-26T12:03:18+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%python\n# Count the amount of rows of the second DataFrame\n","user":"anonymous","dateUpdated":"2019-04-26T12:03:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556272998824_-1612840678","id":"20190426-120318_2105685741","dateCreated":"2019-04-26T12:03:18+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11388","dateFinished":"2019-04-26T12:03:28+0200","dateStarted":"2019-04-26T12:03:28+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 5.1.2","user":"anonymous","dateUpdated":"2019-04-26T12:03:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273008559_-1626539128","id":"20190426-120328_120217976","dateCreated":"2019-04-26T12:03:28+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11460","dateFinished":"2019-04-26T12:03:52+0200","dateStarted":"2019-04-26T12:03:52+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 5.1.2</h3>\n</div>"}]}},{"text":"%python\ntaxi2 = spark.read.load('s3a://bigpicture-guild/nyctaxi/sample_1_month/parquet/')\ntaxi2.cache()","user":"anonymous","dateUpdated":"2019-04-26T12:04:05+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273025520_59397422","id":"20190426-120345_970320118","dateCreated":"2019-04-26T12:03:45+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11533","dateFinished":"2019-04-26T12:04:05+0200","dateStarted":"2019-04-26T12:04:05+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'spark' is not defined\n\n"}]}},{"text":"%python\ntaxi2.count()","user":"anonymous","dateUpdated":"2019-04-26T12:04:12+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273045775_513146862","id":"20190426-120405_2128414809","dateCreated":"2019-04-26T12:04:05+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11645","dateFinished":"2019-04-26T12:04:12+0200","dateStarted":"2019-04-26T12:04:12+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxi2' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxi2' is not defined\n\n"}]}},{"text":"%md\n***Task 5.1.3*** Have a look into the Spark web UI and become familiar with its tabs. Can you see differences by comparing `5.1.1` and `5.1.2` in the Spark web UI (DAG, Event timeline, stages, durations, shufflings, etc.)?","user":"anonymous","dateUpdated":"2019-04-26T12:04:20+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273052800_1146928173","id":"20190426-120412_374746632","dateCreated":"2019-04-26T12:04:12+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11733","dateFinished":"2019-04-26T12:04:20+0200","dateStarted":"2019-04-26T12:04:20+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.1.3</em></strong> Have a look into the Spark web UI and become familiar with its tabs. Can you see differences by comparing <code>5.1.1</code> and <code>5.1.2</code> in the Spark web UI (DAG, Event timeline, stages, durations, shufflings, etc.)?</p>\n</div>"}]}},{"text":"%md\n***Task 5.2***\nConvert the DataFrame of ***Task 5.1.1*** into a RDD and output every single row of the DataFrame. Afterwards only output the first 100 rows. Compare the duration these commands took.","user":"anonymous","dateUpdated":"2019-04-26T12:04:27+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273060484_1622725465","id":"20190426-120420_1928808661","dateCreated":"2019-04-26T12:04:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11822","dateFinished":"2019-04-26T12:04:27+0200","dateStarted":"2019-04-26T12:04:27+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.2</em></strong><br/>Convert the DataFrame of <strong><em>Task 5.1.1</em></strong> into a RDD and output every single row of the DataFrame. Afterwards only output the first 100 rows. Compare the duration these commands took.</p>\n</div>"}]}},{"text":"%md\n***Task 5.2.1*** Convert the DataFrame of ***Task 5.1.1*** into a RDD and output every single row.","user":"anonymous","dateUpdated":"2019-04-26T12:04:34+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273067387_553963785","id":"20190426-120427_1263337016","dateCreated":"2019-04-26T12:04:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11912","dateFinished":"2019-04-26T12:04:34+0200","dateStarted":"2019-04-26T12:04:34+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.2.1</em></strong> Convert the DataFrame of <strong><em>Task 5.1.1</em></strong> into a RDD and output every single row.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T12:04:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273074051_772389573","id":"20190426-120434_1608362117","dateCreated":"2019-04-26T12:04:34+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12002","dateFinished":"2019-04-26T12:04:46+0200","dateStarted":"2019-04-26T12:04:46+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 5.2.1","user":"anonymous","dateUpdated":"2019-04-26T12:05:15+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273086372_-1829968972","id":"20190426-120446_1252788028","dateCreated":"2019-04-26T12:04:46+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12091","dateFinished":"2019-04-26T12:05:15+0200","dateStarted":"2019-04-26T12:05:15+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 5.2.1</h3>\n</div>"}]}},{"text":"%python\ntaxiRDD = taxi.rdd.map(tuple)\nprint(*taxiRDD.collect(), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T12:05:25+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273115638_68991182","id":"20190426-120515_1020324739","dateCreated":"2019-04-26T12:05:15+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12164","dateFinished":"2019-04-26T12:05:25+0200","dateStarted":"2019-04-26T12:05:25+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxi' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxi' is not defined\n\n"}]}},{"text":"%md\n***Task 5.2.2*** Now let´s output only the first 100 rows and compare the durations.","user":"anonymous","dateUpdated":"2019-04-26T12:05:34+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273125589_-451335011","id":"20190426-120525_463928321","dateCreated":"2019-04-26T12:05:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12253","dateFinished":"2019-04-26T12:05:34+0200","dateStarted":"2019-04-26T12:05:34+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.2.2</em></strong> Now let´s output only the first 100 rows and compare the durations.</p>\n</div>"}]}},{"text":"%python\n# Please add your solution in here\n","user":"anonymous","dateUpdated":"2019-04-26T12:05:41+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273134028_453227262","id":"20190426-120534_38428299","dateCreated":"2019-04-26T12:05:34+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12342","dateFinished":"2019-04-26T12:05:41+0200","dateStarted":"2019-04-26T12:05:41+0200","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n### Solution 5.2.2","user":"anonymous","dateUpdated":"2019-04-26T12:05:53+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273141452_1912297373","id":"20190426-120541_1186825795","dateCreated":"2019-04-26T12:05:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12431","dateFinished":"2019-04-26T12:05:53+0200","dateStarted":"2019-04-26T12:05:53+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 5.2.2</h3>\n</div>"}]}},{"text":"%python\nprint(*taxiRDD.take(100), sep = '\\n')","user":"anonymous","dateUpdated":"2019-04-26T12:06:03+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273153508_-208913600","id":"20190426-120553_702896845","dateCreated":"2019-04-26T12:05:53+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12504","dateFinished":"2019-04-26T12:06:03+0200","dateStarted":"2019-04-26T12:06:03+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiRDD' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 312, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'taxiRDD' is not defined\n\n"}]}},{"text":"%md\n***Task 5.3.1*** The subsequent code snippet finds all prime numbers between 2 and 2 million and displays 10 primes. Find out how to determine the number of partitions after each operation. Notice the duration the whole code snippet took.","user":"anonymous","dateUpdated":"2019-04-26T12:06:10+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273163660_163264957","id":"20190426-120603_582467258","dateCreated":"2019-04-26T12:06:03+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12593","dateFinished":"2019-04-26T12:06:10+0200","dateStarted":"2019-04-26T12:06:10+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.3.1</em></strong> The subsequent code snippet finds all prime numbers between 2 and 2 million and displays 10 primes. Find out how to determine the number of partitions after each operation. Notice the duration the whole code snippet took.</p>\n</div>"}]}},{"text":"%python\n# Please add your completions in here\n\n# Construct all non-primes from 2 to 500k (duplicates are tolerated)\nnonPrimes = sc.parallelize(range(2,500000)).map(lambda x: (x, (range(2,500000 / x))))\n\nnonPrimesFlat = nonPrimes.flatMap(lambda x: map(lambda y: y* x[0],x[1]))\n\n# Get all primes by excluding all non-primes from 2 to 500k\nprime = sc.parallelize(range(2, 500000)).subtract(nonPrimesFlat)\n\n# Display 10 primes\nprime.take(10)","user":"anonymous","dateUpdated":"2019-04-26T12:06:19+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273170628_-1047579251","id":"20190426-120610_1826630253","dateCreated":"2019-04-26T12:06:10+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12682","dateFinished":"2019-04-26T12:06:19+0200","dateStarted":"2019-04-26T12:06:19+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\n"}]}},{"text":"%md\n### Solution 5.3.1","user":"anonymous","dateUpdated":"2019-04-26T12:06:33+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273179812_75076373","id":"20190426-120619_236153871","dateCreated":"2019-04-26T12:06:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12771","dateFinished":"2019-04-26T12:06:33+0200","dateStarted":"2019-04-26T12:06:33+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 5.3.1</h3>\n</div>"}]}},{"text":"%python\n# Construct all non-primes from 2 to 500k (duplicates are tolerated)\nnonPrimes = sc.parallelize(range(2,500000)).map(lambda x: (x, (range(2,500000 / x))))\nprint('nonPrimes is distributed across {} partitions'.format(nonPrimes.getNumPartitions()))\n\nnonPrimesFlat = nonPrimes.flatMap(lambda x: map(lambda y: y* x[0],x[1]))\nprint('nonPrimesFlat is distributed across {} partitions'.format(nonPrimesFlat.getNumPartitions()))\n\n# Get all primes by excluding all non-primes from 2 to 500k\nprime = sc.parallelize(range(2, 500000)).subtract(nonPrimesFlat)\nprint('prime is distributed across {} partitions'.format(prime.getNumPartitions()))\n\n# Display 10 primes\nprime.take(10)","user":"anonymous","dateUpdated":"2019-04-26T12:06:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273193068_-33855972","id":"20190426-120633_1159838601","dateCreated":"2019-04-26T12:06:33+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12860","dateFinished":"2019-04-26T12:06:46+0200","dateStarted":"2019-04-26T12:06:46+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\n"}]}},{"text":"%md\n***Task 5.3.2*** Now try to optimize the code of Task 5.3.1 by using `repartition`. Remember the rule of thumb for repartitioning and figure out the necessary information for applying it. Notice the duration the whole code snippet is taking now.","user":"anonymous","dateUpdated":"2019-04-26T12:06:55+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273206477_-966870853","id":"20190426-120646_340850043","dateCreated":"2019-04-26T12:06:46+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12949","dateFinished":"2019-04-26T12:06:55+0200","dateStarted":"2019-04-26T12:06:55+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>Task 5.3.2</em></strong> Now try to optimize the code of Task 5.3.1 by using <code>repartition</code>. Remember the rule of thumb for repartitioning and figure out the necessary information for applying it. Notice the duration the whole code snippet is taking now.</p>\n</div>"}]}},{"text":"%python\n# Please add your completions in here\n\n# Construct all non-primes from 2 to 500k (duplicates are tolerated)\nnonPrimes = sc.parallelize(range(2,500000)).map(lambda x: (x, (range(2,500000 / x))))\n\nnonPrimesFlat = nonPrimes.flatMap(lambda x: map(lambda y: y* x[0],x[1]))\n\n# Get all primes by excluding all non-primes from 2 to 500k\nprime = sc.parallelize(range(2, 500000)).subtract(nonPrimesFlat)\n\n# Display 10 primes\nprime.take(10)","user":"anonymous","dateUpdated":"2019-04-26T12:07:08+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273215397_241983079","id":"20190426-120655_1484164494","dateCreated":"2019-04-26T12:06:55+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13038","dateFinished":"2019-04-26T12:07:08+0200","dateStarted":"2019-04-26T12:07:08+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\n"}]}},{"text":"%md\n### Solution 5.3.2","user":"anonymous","dateUpdated":"2019-04-26T12:07:29+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273228461_1030610805","id":"20190426-120708_1515438840","dateCreated":"2019-04-26T12:07:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13127","dateFinished":"2019-04-26T12:07:29+0200","dateStarted":"2019-04-26T12:07:29+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Solution 5.3.2</h3>\n</div>"}]}},{"text":"%python\n# Construct all non-primes from 2 to 500k (duplicates are tolerated)\nnonPrimes = sc.parallelize(range(2,500000)).map(lambda x: (x, (range(2,500000 / x))))\nprint('nonPrimes is distributed across {} partitions'.format(nonPrimes.getNumPartitions()))\n\n# Rule of thumb: number of partitions = cores per CPU * CPU per cluster * 2 or 3\nnonPrimesRep = nonPrimes.repartition(36)\nprint('nonPrimesRep is distributed across {} partitions'.format(nonPrimesRep.getNumPartitions()))\n\nnonPrimesRepFlat = nonPrimesRep.flatMap(lambda x: map(lambda y: y* x[0],x[1]))\nprint('nonPrimesRepFlat is distributed across {} partitions'.format(nonPrimesRepFlat.getNumPartitions()))\n\n# Get all primes by excluding all non-primes from 2 to 500k\nprime = sc.parallelize(range(2, 500000)).subtract(nonPrimesRepFlat)\nprint('prime is distributed across {} partitions'.format(prime.getNumPartitions()))\n\n# Display 10 primes\nprime.take(10)","user":"anonymous","dateUpdated":"2019-04-26T12:07:37+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556273249539_216131403","id":"20190426-120729_1832274050","dateCreated":"2019-04-26T12:07:29+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13216","dateFinished":"2019-04-26T12:07:37+0200","dateStarted":"2019-04-26T12:07:37+0200","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 319, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_python-7449687324443856767.py\", line 307, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sc' is not defined\n\n"}]}}],"name":"/6. Exercises/6.2 Exercises - Python","id":"2E8U5GQQM","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}