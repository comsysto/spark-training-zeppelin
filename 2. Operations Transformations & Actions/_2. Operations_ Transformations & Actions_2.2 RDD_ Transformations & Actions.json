{"paragraphs":[{"text":"%md <img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://global-uploads.webflow.com/5ad0acc69f356a98471287a3/5ae073d500595f83d49e713a_logo_Comsysto-Reply_color.svg' style='width:400px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903980_-1931949803","id":"20190424-164232_866240267","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30228"},{"text":"%md \n# 2.2 RDD: Transformations & Actions","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>2.2 RDD: Transformations &amp; Actions</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903981_-855527253","id":"20190424-164239_1438219612","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30229"},{"text":"%md\n***2.2.1 RDD Transformations***\n  \n***2.2.2 RDD Actions***\n  \n***2.2.3 Applying RDD API***\n  \n* Creation of sample data out of in-memory data\n       \n* Exemplary RDD transformations without shuffling (`map`, `mapPartitions`, `mapPartitionsWithIndex`, `flatMap`, `filter`)\n       \n* Exemplary RDD transformations involving shuffle (`groupByKey`, `reduceByKey`, `sortBy`, `repartition`)\n       \n* Exemplary RDD actions (`collect`, `count`, `reduce`, `foreach`)\n       \n***2.2.4 Group exercise***","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong><em>2.2.1 RDD Transformations</em></strong></p>\n<p><strong><em>2.2.2 RDD Actions</em></strong></p>\n<p><strong><em>2.2.3 Applying RDD API</em></strong></p>\n<ul>\n  <li>\n  <p>Creation of sample data out of in-memory data</p></li>\n  <li>\n  <p>Exemplary RDD transformations without shuffling (<code>map</code>, <code>mapPartitions</code>, <code>mapPartitionsWithIndex</code>, <code>flatMap</code>, <code>filter</code>)</p></li>\n  <li>\n  <p>Exemplary RDD transformations involving shuffle (<code>groupByKey</code>, <code>reduceByKey</code>, <code>sortBy</code>, <code>repartition</code>)</p></li>\n  <li>\n  <p>Exemplary RDD actions (<code>collect</code>, <code>count</code>, <code>reduce</code>, <code>foreach</code>)</p></li>\n</ul>\n<p><strong><em>2.2.4 Group exercise</em></strong></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903981_24547565","id":"20190424-164246_1308104480","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30230"},{"text":"%md\n## 2.2.1 RDD Transformations\n\n*   Overview of RDD transformations can be found [here](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD).\n\n*   Some RDD transformations provide predefined functions (i.e. `distinct`). In general you have to apply your own, use case specific function inside a RDD transformation (i.e. `map`)\n\n*   Examples of some common transformations:\n    - `union`\n    - `map`\n    - `filter`\n    - `distinct`","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.2.1 RDD Transformations</h2>\n<ul>\n  <li>\n  <p>Overview of RDD transformations can be found <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD\">here</a>.</p></li>\n  <li>\n  <p>Some RDD transformations provide predefined functions (i.e. <code>distinct</code>). In general you have to apply your own, use case specific function inside a RDD transformation (i.e. <code>map</code>)</p></li>\n  <li>\n    <p>Examples of some common transformations:</p>\n    <ul>\n      <li><code>union</code></li>\n      <li><code>map</code></li>\n      <li><code>filter</code></li>\n      <li><code>distinct</code></li>\n    </ul>\n  </li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903982_1370865202","id":"20190424-164252_1189981600","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30231"},{"text":"%md\n## 2.2.2 RDD actions\n\n*   Overview of RDD actions can be found [here](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD).\n\n*   Examples of some common ations:\n    - `count`\n    - `take`\n    - `collect`\n    - `first`","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.2.2 RDD actions</h2>\n<ul>\n  <li>\n  <p>Overview of RDD actions can be found <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD\">here</a>.</p></li>\n  <li>\n    <p>Examples of some common ations:</p>\n    <ul>\n      <li><code>count</code></li>\n      <li><code>take</code></li>\n      <li><code>collect</code></li>\n      <li><code>first</code></li>\n    </ul>\n  </li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903982_1925708649","id":"20190424-164258_8090283","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30232"},{"text":"%md\n## 2.2.3 Applying RDD API","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.2.3 Applying RDD API</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903983_357587430","id":"20190424-164311_1714774242","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30233"},{"text":"%md\n#### Creation of sample data out of in-memory data","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Creation of sample data out of in-memory data</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903983_1651933339","id":"20190424-164322_193765665","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30234"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n","user":"anonymous","dateUpdated":"2019-05-20T08:00:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903984_-789673536","id":"20190424-164327_1952853990","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:00:13+0000","dateFinished":"2019-05-20T08:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30235"},{"text":"%spark\n// define case class representing schema of our data.\ncase class Song(artist: String, loudness: Double)\n\n// create standard Scala array -> Located on the master node only, and not distributed\nval songArray = Array(\n                    Song(\"Beastie Boys\", -5.0), \n                    Song(\"Frank Sinatra\", -10.0), \n                    Song(\"Muse\", -7.0),\n                    Song(\"Muse\", -6.0)\n                )\n\n// Create a RDD of type 'Song' out of in-memory data\nval songRDD = sc.parallelize(songArray)\n\n// which is automatically distributed on X partitions\nsongRDD.getNumPartitions","user":"anonymous","dateUpdated":"2019-05-20T08:09:08+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Song\nsongArray: Array[Song] = Array(Song(Beastie Boys,-5.0), Song(Frank Sinatra,-10.0), Song(Muse,-7.0), Song(Muse,-6.0))\nsongRDD: org.apache.spark.rdd.RDD[Song] = ParallelCollectionRDD[1] at parallelize at <console>:30\nres2: Int = 2\n"}]},"apps":[],"jobName":"paragraph_1558337903984_90898311","id":"20190424-164412_2082837201","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:02:58+0000","dateFinished":"2019-05-20T08:02:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30236"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T08:01:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903984_-1645492363","id":"20190424-164428_1940915419","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:01:33+0000","dateFinished":"2019-05-20T08:01:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30237"},{"text":"%pyspark\n# create standard Python list -> Located on the master node only, and not distributed\nsongList = [\n                ['Beastie Boys', -5.0],\n                ['Frank Sinatra', -10.0],\n                ['Muse', -7.0],\n                ['Muse', -6.0]\n            ]\nprint(songList)\n            \n# Create a RDD out of in-memory data         \nsongRDD = sc.parallelize(songList)\nprint(songRDD)\n\n# which is automatically distributed on X partitions\nsongRDD.getNumPartitions()","user":"anonymous","dateUpdated":"2019-05-20T09:33:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[['Beastie Boys', -5.0], ['Frank Sinatra', -10.0], ['Muse', -7.0], ['Muse', -6.0]]\nParallelCollectionRDD[64] at parallelize at PythonRDD.scala:195\n2\n"}]},"apps":[],"jobName":"paragraph_1558339454621_893701529","id":"20190520-080414_1442184918","dateCreated":"2019-05-20T08:04:14+0000","dateStarted":"2019-05-20T09:33:47+0000","dateFinished":"2019-05-20T09:33:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30238"},{"text":"%md\n### Examplary RDD transformations without shuffling\n\n*   `map`: Creates a new RDD by mapping all *elements* via a self-defined function\n\n*   `mapPartitions`: Similar to map it also creates a new RDD by mapping all *partitions* via a self-defined function\n\n*   `mapPartitionsWithIndex`: Similar to mapPartitions it also creates a new RDD by mapping all *partitions* via a self-defined function and tracks the index of the original partition\n\n*   `flatMap`: Creates a new RDD by mapping all elements via a self-defined function and flattens the result\n\n*   `filter`: Returns only elements which match the filter condition","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Examplary RDD transformations without shuffling</h3>\n<ul>\n  <li>\n  <p><code>map</code>: Creates a new RDD by mapping all <em>elements</em> via a self-defined function</p></li>\n  <li>\n  <p><code>mapPartitions</code>: Similar to map it also creates a new RDD by mapping all <em>partitions</em> via a self-defined function</p></li>\n  <li>\n  <p><code>mapPartitionsWithIndex</code>: Similar to mapPartitions it also creates a new RDD by mapping all <em>partitions</em> via a self-defined function and tracks the index of the original partition</p></li>\n  <li>\n  <p><code>flatMap</code>: Creates a new RDD by mapping all elements via a self-defined function and flattens the result</p></li>\n  <li>\n  <p><code>filter</code>: Returns only elements which match the filter condition</p></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903985_-1316882012","id":"20190424-164444_1278854587","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30239"},{"text":"%md\n#### map\nCreates a new RDD by applying a function `f` to all *elements* of the current RDD.","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>map</h4>\n<p>Creates a new RDD by applying a function <code>f</code> to all <em>elements</em> of the current RDD.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903986_1747384173","id":"20190424-164454_1532182699","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30240"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T08:09:29+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903987_515313971","id":"20190424-164501_1253317514","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:09:29+0000","dateFinished":"2019-05-20T08:09:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30241"},{"text":"%spark\n// Retrieve all artists out of 'songRDD' without their loudness and send the results to the master\nsongRDD.map(song => song.artist).collect.foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T08:12:09+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=0"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903987_-1687519664","id":"20190424-164516_1876661419","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:09:34+0000","dateFinished":"2019-05-20T08:09:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30242"},{"text":"%spark\n// this is semantically equivalent but more concise\nsongRDD.map(_.artist).collect.foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T08:10:28+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903988_-1124578963","id":"20190424-164531_1341922235","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:10:00+0000","dateFinished":"2019-05-20T08:10:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30243"},{"text":"%spark\n// this is semantically equivalent but more verbose\ndef artist(s: Song): String = s.artist\n\nsongRDD.map(artist).collect.foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T08:10:34+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\nartist: (s: Song)String\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903988_-1746654126","id":"20190424-164543_1994340469","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:10:03+0000","dateFinished":"2019-05-20T08:10:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30244"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T08:10:37+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903988_159576621","id":"20190424-164550_47552777","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:10:37+0000","dateFinished":"2019-05-20T08:10:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30245"},{"text":"%pyspark\n# Retrieve all artists out of 'songRDD' without their loudness and send the results to the master\nsongRddArtist = songRDD.map(lambda rdd: rdd[0]).collect()\n\nfor element in songRddArtist:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T08:29:45+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=13"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903989_1086450131","id":"20190424-164603_387787021","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:29:45+0000","dateFinished":"2019-05-20T08:29:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30246"},{"text":"%pyspark\n# this is semantically equivalent but more verbose\ndef artist(songRDD):\n    return songRDD[0]\n\nsongRddArtist = songRDD.map(artist).collect()\n\nfor element in songRddArtist:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T08:27:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=10"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558340684248_-844458907","id":"20190520-082444_1668424157","dateCreated":"2019-05-20T08:24:44+0000","dateStarted":"2019-05-20T08:27:18+0000","dateFinished":"2019-05-20T08:27:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30247"},{"text":"%md\n### mapPartitions\nCreates a new RDD by applying a function `f` to all *partitions* of the current RDD.","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>mapPartitions</h3>\n<p>Creates a new RDD by applying a function <code>f</code> to all <em>partitions</em> of the current RDD.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903989_-84057830","id":"20190424-164610_517975478","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30248"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T08:27:40+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903990_695730826","id":"20190424-164617_2019112030","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:27:40+0000","dateFinished":"2019-05-20T08:27:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30249"},{"text":"%spark\n// Retrieve all artists for every partition out of 'songRDD' without their loudness and send the results to the master\nsongRDD.mapPartitions(song => song.map(a => a.artist))\n       .collect\n       .foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T09:24:32+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=11"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903991_1096497138","id":"20190424-164635_1755470908","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:28:04+0000","dateFinished":"2019-05-20T08:28:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30250"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T08:28:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903991_-1771563647","id":"20190424-164644_252579373","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T08:28:16+0000","dateFinished":"2019-05-20T08:28:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30251"},{"text":"%pyspark\n# Retrieve all artists for every partition out of 'songRDD' without their loudness and send the results to the master\ndef artist(partition):\n    for element in partition:\n        yield element[0]\n\nsongRddArtist = songRDD.mapPartitions(artist).collect()\n\nfor element in songRddArtist:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T09:35:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=45"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558343206116_-1670971345","id":"20190520-090646_1229341190","dateCreated":"2019-05-20T09:06:46+0000","dateStarted":"2019-05-20T09:35:57+0000","dateFinished":"2019-05-20T09:36:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30252"},{"text":"%md\n### mapPartitionsWithIndex\nCreates a new RDD by applying a function `f` to all *partitions* of the current RDD and tracks the index of each partition.","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>mapPartitionsWithIndex</h3>\n<p>Creates a new RDD by applying a function <code>f</code> to all <em>partitions</em> of the current RDD and tracks the index of each partition.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903992_719130119","id":"20190424-164659_867317345","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30253"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T09:20:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903993_876701651","id":"20190424-164707_760764841","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:20:57+0000","dateFinished":"2019-05-20T09:20:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30254"},{"text":"%spark\n// Retrieve all artists for every partition out of 'songRDD' without their loudness and add the partition index\nsongRDD.mapPartitionsWithIndex((index, song) => (song.map(a => a.artist + \" at index \" + index)))\n                              .collect\n                              .foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T09:25:37+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys at index 0\nFrank Sinatra at index 0\nMuse at index 1\nMuse at index 1\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=44"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903993_-39354244","id":"20190424-164720_461065472","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:25:37+0000","dateFinished":"2019-05-20T09:25:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30255"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T09:26:22+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903994_-936063328","id":"20190424-164733_1832365325","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:26:22+0000","dateFinished":"2019-05-20T09:26:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30256"},{"text":"%pyspark\n# Retrieve all artists for every partition out of 'songRDD' without their loudness and add the partition index\ndef artistWithIndex(index, partition):\n    for element in partition:\n        yield index, element[0]\n    \nsongRddPartIndex = songRDD.mapPartitionsWithIndex(artistWithIndex).collect()\n\nfor element in songRddPartIndex:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T09:39:56+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(0, 'Beastie Boys')\n(0, 'Frank Sinatra')\n(1, 'Muse')\n(1, 'Muse')\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=52"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903994_-1988526522","id":"20190424-164743_520757229","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:39:57+0000","dateFinished":"2019-05-20T09:39:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30257"},{"text":"%md \n\n#### flatMap\n\nApplies a function `f: (T) => TraversableOnce[U]` to the elements of a RDD and flattens the result.","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>flatMap</h4>\n<p>Applies a function <code>f: (T) =&gt; TraversableOnce[U]</code> to the elements of a RDD and flattens the result.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903995_1792041719","id":"20190424-164749_384903392","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30258"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T09:40:08+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903995_2000827448","id":"20190424-164810_116970684","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:40:08+0000","dateFinished":"2019-05-20T09:40:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30259"},{"text":"%spark\nsongRDD.flatMap(_.artist.split(\" \")).collect.foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T09:41:39+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie\nBoys\nFrank\nSinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=53"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903996_-1161833278","id":"20190424-164819_480696606","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:41:39+0000","dateFinished":"2019-05-20T09:41:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30260"},{"text":"// flatMap vs. map\nval withMap = songRDD.map(_.artist.split(\" \")).collect\nval withFlatMap = songRDD.flatMap(_.artist.split(\" \")).collect","user":"anonymous","dateUpdated":"2019-05-20T09:42:55+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"withMap: Array[Array[String]] = Array(Array(Beastie, Boys), Array(Frank, Sinatra), Array(Muse), Array(Muse))\nwithFlatMap: Array[String] = Array(Beastie, Boys, Frank, Sinatra, Muse, Muse)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=60","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=61"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903996_1834511744","id":"20190424-164831_646211793","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:42:55+0000","dateFinished":"2019-05-20T09:42:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30261"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T09:42:59+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903997_245268271","id":"20190424-164846_1644244362","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:42:59+0000","dateFinished":"2019-05-20T09:42:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30262"},{"text":"%pyspark\nsongRddFlat = songRDD.flatMap(lambda x: x[0].split(\" \")).collect()\n\nfor element in songRddFlat:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T09:45:04+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie\nBoys\nFrank\nSinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=63"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337903997_1388562110","id":"20190424-164857_1740391552","dateCreated":"2019-05-20T07:38:23+0000","dateStarted":"2019-05-20T09:45:04+0000","dateFinished":"2019-05-20T09:45:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30263"},{"text":"%pyspark\n# flatMap vs. map\nwithMap = songRDD.map(lambda x: x[0].split(\" \")).collect()\nwithFlatMap = songRDD.flatMap(lambda x: x[0].split(\" \")).collect()\n\nprint(\"map\")\nprint\nfor element in withMap:\n    print(element)\n    \nprint\nprint(\"##############################\")\nprint\nprint(\"flatMap\")\nprint\nfor element in withFlatMap:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T11:23:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"map\n\n['Beastie', 'Boys']\n['Frank', 'Sinatra']\n['Muse']\n['Muse']\n\n##############################\n\nflatMap\n\nBeastie\nBoys\nFrank\nSinatra\nMuse\nMuse\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=96","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=97"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558345511859_-1485529303","id":"20190520-094511_250759422","dateCreated":"2019-05-20T09:45:11+0000","dateStarted":"2019-05-20T11:23:48+0000","dateFinished":"2019-05-20T11:23:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30264"},{"text":"%md \n\n#### filter\nCreate a new RDD containing only those elements for which `f` returns `true`.\n","user":"anonymous","dateUpdated":"2019-05-20T07:38:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>filter</h4>\n<p>Create a new RDD containing only those elements for which <code>f</code> returns <code>true</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337903998_797189894","id":"20190424-164903_2059339109","dateCreated":"2019-05-20T07:38:23+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30265"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T09:49:17+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904002_1699244587","id":"20190424-164911_513846320","dateCreated":"2019-05-20T07:38:24+0000","dateStarted":"2019-05-20T09:49:17+0000","dateFinished":"2019-05-20T09:49:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30266"},{"text":"%spark\nsongRDD.filter(s => s.loudness > -8.0).collect","user":"anonymous","dateUpdated":"2019-05-20T09:49:23+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res10: Array[Song] = Array(Song(Beastie Boys,-5.0), Song(Muse,-7.0), Song(Muse,-6.0))\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=82"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337904002_833506960","id":"20190424-164921_138118664","dateCreated":"2019-05-20T07:38:24+0000","dateStarted":"2019-05-20T09:49:23+0000","dateFinished":"2019-05-20T09:49:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30267"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T09:49:26+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904003_1289971261","id":"20190424-164929_56039700","dateCreated":"2019-05-20T07:38:24+0000","dateStarted":"2019-05-20T09:49:26+0000","dateFinished":"2019-05-20T09:49:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30268"},{"text":"%pyspark\nsongRDD.filter(lambda x: x[1] > -8.0).collect()","user":"anonymous","dateUpdated":"2019-05-20T09:51:37+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[['Beastie Boys', -5.0], ['Muse', -7.0], ['Muse', -6.0]]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=84"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1558337904003_-1461099600","id":"20190424-164957_698676761","dateCreated":"2019-05-20T07:38:24+0000","dateStarted":"2019-05-20T09:51:37+0000","dateFinished":"2019-05-20T09:51:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30269"},{"text":"%md\n### Examplary RDD transformations involving shuffling\n\n*   `groupByKey`: Works on a collection of Key-Values pairs and returns a Map with a list of all values for each key.\n\n*   `reduceByKey`: Works on a collection of Key-Values pairs and merges the values for each key using an associative and commutative reduce function.\n\n*   `sortBy`: Sort Dataset by a specified function.\n\n*   `repartition`: Partitions the dataset into the manually specified number of partitions.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Examplary RDD transformations involving shuffling</h3>\n<ul>\n  <li>\n  <p><code>groupByKey</code>: Works on a collection of Key-Values pairs and returns a Map with a list of all values for each key.</p></li>\n  <li>\n  <p><code>reduceByKey</code>: Works on a collection of Key-Values pairs and merges the values for each key using an associative and commutative reduce function.</p></li>\n  <li>\n  <p><code>sortBy</code>: Sort Dataset by a specified function.</p></li>\n  <li>\n  <p><code>repartition</code>: Partitions the dataset into the manually specified number of partitions.</p></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904004_629524562","id":"20190424-165003_1648997800","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30270"},{"text":"%md\n#### groupByKey\nGroup the values for each key in the RDD into a single sequence.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>groupByKey</h4>\n<p>Group the values for each key in the RDD into a single sequence.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904004_-276864468","id":"20190424-165149_67196361","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30271"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T09:52:02+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904005_1971810047","id":"20190424-165203_1534480763","dateCreated":"2019-05-20T07:38:24+0000","dateStarted":"2019-05-20T09:52:02+0000","dateFinished":"2019-05-20T09:52:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30272"},{"text":"%spark\n// 'keyBy' creates RDDs containing key-value pairs, so called PairRDD´s by applying a function. Similar to creating a tuple using `map`.\nval songPairRDD = songRDD.keyBy(_.artist)   // .map(song => (song.artist, song))\nsongPairRDD.collect.foreach(println)\n\nprintln()\nprintln(\"##############################\")\nprintln()\n\nsongPairRDD.groupByKey\n           .collect.foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T11:23:20+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(Beastie Boys,Song(Beastie Boys,-5.0))\n(Frank Sinatra,Song(Frank Sinatra,-10.0))\n(Muse,Song(Muse,-7.0))\n(Muse,Song(Muse,-6.0))\n\n##############################\n\n(Beastie Boys,CompactBuffer(Song(Beastie Boys,-5.0)))\n(Frank Sinatra,CompactBuffer(Song(Frank Sinatra,-10.0)))\n(Muse,CompactBuffer(Song(Muse,-7.0), Song(Muse,-6.0)))\nsongPairRDD: org.apache.spark.rdd.RDD[(String, Song)] = MapPartitionsRDD[120] at keyBy at <console>:26\n"}]},"apps":[],"jobName":"paragraph_1558337904005_1522966542","id":"20190424-165213_2055988822","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30273","dateFinished":"2019-05-20T11:23:22+0000","dateStarted":"2019-05-20T11:23:21+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=92","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=93"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T09:52:32+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904011_651007911","id":"20190424-165231_1901045190","dateCreated":"2019-05-20T07:38:24+0000","dateStarted":"2019-05-20T09:52:32+0000","dateFinished":"2019-05-20T09:52:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30274"},{"text":"%pyspark\n# 'keyBy' creates RDDs containing key-value pairs, so called PairRDD´s by applying a function. Similar to creating a tuple using `map`.\nsongPairRDD = songRDD.keyBy(lambda x: x[0])   # .map(lambda x: x[0])\nfor element in songPairRDD.collect():\n    print(element)\n\nprint\nprint(\"##############################\")\nprint\n\nsongPairRddGrouped = songPairRDD.groupByKey().collect()\nfor element in songPairRddGrouped:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T11:23:09+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Beastie Boys', ['Beastie Boys', -5.0])\n('Frank Sinatra', ['Frank Sinatra', -10.0])\n('Muse', ['Muse', -7.0])\n('Muse', ['Muse', -6.0])\n\n##############################\n('Beastie Boys', <pyspark.resultiterable.ResultIterable object at 0x7f24ddf6dcd0>)\n('Muse', <pyspark.resultiterable.ResultIterable object at 0x7f24ddf6db50>)\n('Frank Sinatra', <pyspark.resultiterable.ResultIterable object at 0x7f24ddf6d0d0>)\n"}]},"apps":[],"jobName":"paragraph_1558337904011_-1327376487","id":"20190424-165311_276236066","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30275","dateFinished":"2019-05-20T11:23:01+0000","dateStarted":"2019-05-20T11:23:00+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=90","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=91"],"interpreterSettingId":"spark"}}},{"text":"%md\n#### reduceByKey\n\nMerge the values belonging to a key by applying a reduce function `f`. `f` is applied locally (each worker) first. Afterwards the already reduced data is shuffled and `f` is applied again to obtain the final result.\n\n`f` must be *associative* and *commutative*. Thus `f` must satisfy the following properties:\n\n*   `f(f(x, y), z) = f(x, f(y, z))` (associativity)\n*   `f(x, y) = f(y, x)` (commutativity)","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>reduceByKey</h4>\n<p>Merge the values belonging to a key by applying a reduce function <code>f</code>. <code>f</code> is applied locally (each worker) first. Afterwards the already reduced data is shuffled and <code>f</code> is applied again to obtain the final result.</p>\n<p><code>f</code> must be <em>associative</em> and <em>commutative</em>. Thus <code>f</code> must satisfy the following properties:</p>\n<ul>\n  <li><code>f(f(x, y), z) = f(x, f(y, z))</code> (associativity)</li>\n  <li><code>f(x, y) = f(y, x)</code> (commutativity)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904011_1200155654","id":"20190424-165319_1621637736","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30276"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T11:24:28+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904012_1251964975","id":"20190424-165328_1534478641","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30277","dateFinished":"2019-05-20T11:24:28+0000","dateStarted":"2019-05-20T11:24:28+0000"},{"text":"%spark\nval totalLoudnessByArtist = songRDD.map(song => (song.artist, song.loudness))\n                                   .reduceByKey(_ + _)\n                                   .collect\n                                   .foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T11:24:46+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(Beastie Boys,-5.0)\n(Frank Sinatra,-10.0)\n(Muse,-13.0)\ntotalLoudnessByArtist: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1558337904012_492336861","id":"20190424-165340_448545818","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30278","dateFinished":"2019-05-20T11:24:47+0000","dateStarted":"2019-05-20T11:24:46+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=98"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T11:24:50+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904013_-1257843841","id":"20190424-165353_857413129","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30279","dateFinished":"2019-05-20T11:24:50+0000","dateStarted":"2019-05-20T11:24:50+0000"},{"text":"%pyspark\n# 'ByKey' function with the aim of aggregation (e.g. reduceByKey, aggregateByKey, etc.) use PySpark specific aggregation operators which need to be imported separately\nfrom operator import add   # Aggregation operator(s) for 'reduceByKey'\n\ntotalLoudnessByArtist = songRDD.map(lambda x: (x[0], x[1])).reduceByKey(add).collect()\n                               \nfor element in totalLoudnessByArtist:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T11:35:21+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Beastie Boys', -5.0)\n('Muse', -13.0)\n('Frank Sinatra', -10.0)\n"}]},"apps":[],"jobName":"paragraph_1558337904013_249111928","id":"20190424-165403_1080844924","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30280","dateFinished":"2019-05-20T11:35:31+0000","dateStarted":"2019-05-20T11:35:21+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=103"],"interpreterSettingId":"spark"}}},{"text":"%md \n\n#### sortBy\n\nSort a RDD by the values returned by the function `f`.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>sortBy</h4>\n<p>Sort a RDD by the values returned by the function <code>f</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904014_1388571735","id":"20190424-165408_325478124","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30281"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T11:35:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904014_1231379094","id":"20190424-165427_271637576","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30282","dateFinished":"2019-05-20T11:35:27+0000","dateStarted":"2019-05-20T11:35:27+0000"},{"text":"%spark\n// unsorted\nval unsorted = songRDD.collect\n                      .foreach(println)\n\nprintln()\nprintln(\"####################################\")\nprintln()\n\n// sorted descending\nval sorted = songRDD.sortBy(song => song.artist, ascending=false)\n                    .collect\n                    .foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T11:40:12+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Song(Beastie Boys,-5.0)\nSong(Frank Sinatra,-10.0)\nSong(Muse,-7.0)\nSong(Muse,-6.0)\n\n####################################\n\nSong(Muse,-7.0)\nSong(Muse,-6.0)\nSong(Frank Sinatra,-10.0)\nSong(Beastie Boys,-5.0)\nunsorted: Unit = ()\nsorted: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1558337904017_-295130027","id":"20190424-165543_1388341772","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30283","dateFinished":"2019-05-20T11:40:14+0000","dateStarted":"2019-05-20T11:40:13+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=121","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=122","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=123"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T11:36:03+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1558337904018_-2145186045","id":"20190424-165549_1176757453","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30284","dateFinished":"2019-05-20T11:36:03+0000","dateStarted":"2019-05-20T11:36:03+0000"},{"text":"%pyspark\n# unsorted\nfor element in songRDD.collect():\n    print(element)\n\nprint\nprint(\"####################################\")\nprint\n\n# sorted descending\nsorted = songRDD.sortBy(lambda x: x[0], ascending=False).collect()\n\nfor element in sorted:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T11:40:26+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['Beastie Boys', -5.0]\n['Frank Sinatra', -10.0]\n['Muse', -7.0]\n['Muse', -6.0]\n\n####################################\n\n['Muse', -7.0]\n['Muse', -6.0]\n['Frank Sinatra', -10.0]\n['Beastie Boys', -5.0]\n"}]},"apps":[],"jobName":"paragraph_1558337904018_1672017576","id":"20190424-165616_832316011","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30285","dateFinished":"2019-05-20T11:40:26+0000","dateStarted":"2019-05-20T11:40:26+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=124","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=125","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=126","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=127"],"interpreterSettingId":"spark"}}},{"text":"%md\n\n#### repartition\n\nCreate a RDD with a manually defined amount of partitions by using `repartition`.","user":"anonymous","dateUpdated":"2019-05-20T11:43:05+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>repartition</h4>\n<p>Create a RDD with a manually defined amount of partitions by using <code>repartition</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904018_1834263873","id":"20190424-165623_1225704734","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30286","dateFinished":"2019-05-20T11:43:06+0000","dateStarted":"2019-05-20T11:43:05+0000"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T11:40:32+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904019_1044022883","id":"20190424-165633_215023255","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30287","dateFinished":"2019-05-20T11:40:32+0000","dateStarted":"2019-05-20T11:40:32+0000"},{"text":"%spark\nval initialPartitions = songRDD.getNumPartitions\n\n// Repartitioning 'songRDD' to one partition\nval afterRepartition = songRDD.repartition(1).getNumPartitions","user":"anonymous","dateUpdated":"2019-05-20T11:51:38+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"initialPartitions: Int = 2\nafterRepartition: Int = 1\n"}]},"apps":[],"jobName":"paragraph_1558337904019_35059503","id":"20190424-165641_862428268","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30288","dateFinished":"2019-05-20T11:51:38+0000","dateStarted":"2019-05-20T11:51:38+0000"},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T11:43:21+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904020_-344924385","id":"20190424-165647_758340996","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30289","dateFinished":"2019-05-20T11:43:21+0000","dateStarted":"2019-05-20T11:43:21+0000"},{"text":"%pyspark\ninitialPartitions = songRDD.getNumPartitions()\nprint(\"initialPartitions: \" + str(initialPartitions))\n\n# Repartitioning 'songRDD' to one partition\nafterRepartition = songRDD.repartition(1).getNumPartitions()\nprint(\"afterRepartition: \" + str(afterRepartition))","user":"anonymous","dateUpdated":"2019-05-20T11:51:30+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"initialPartitions: 2\nafterRepartition: 1\n"}]},"apps":[],"jobName":"paragraph_1558337904020_-1010840215","id":"20190424-165705_299314566","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30290","dateFinished":"2019-05-20T11:50:45+0000","dateStarted":"2019-05-20T11:50:45+0000"},{"text":"%md\n### Examplary RDD actions\n\n*   `collect`: Return all the elements of the dataset as an array at the driver program.\n\n*   `count`: Count the number of elements in the dataset.\n\n*   `reduce`: Aggregate the elements of the dataset using a self-defined function.\n\n*   `foreach`: Run a self-defined function on each element in the dataset.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Examplary RDD actions</h3>\n<ul>\n  <li>\n  <p><code>collect</code>: Return all the elements of the dataset as an array at the driver program.</p></li>\n  <li>\n  <p><code>count</code>: Count the number of elements in the dataset.</p></li>\n  <li>\n  <p><code>reduce</code>: Aggregate the elements of the dataset using a self-defined function.</p></li>\n  <li>\n  <p><code>foreach</code>: Run a self-defined function on each element in the dataset.</p></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904021_1493795810","id":"20190424-165710_1690085944","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30291"},{"text":"%md \n#### collect\n\nReturn all elements of the RDD or Dataset as an array to the driver program.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>collect</h4>\n<p>Return all elements of the RDD or Dataset as an array to the driver program.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904021_306949179","id":"20190424-165717_541709283","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30292"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T11:51:52+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904021_1957423409","id":"20190424-165724_1393967634","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30293","dateFinished":"2019-05-20T11:51:52+0000","dateStarted":"2019-05-20T11:51:52+0000"},{"text":"%spark\nsongRDD.collect()","user":"anonymous","dateUpdated":"2019-05-20T12:10:37+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res13: Array[Song] = Array(Song(Beastie Boys,-5.0), Song(Frank Sinatra,-10.0), Song(Muse,-7.0), Song(Muse,-6.0))\n"}]},"apps":[],"jobName":"paragraph_1558337904022_309993759","id":"20190424-165733_2116791431","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30294","dateFinished":"2019-05-20T12:10:38+0000","dateStarted":"2019-05-20T12:10:37+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=129"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T12:10:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904022_878986149","id":"20190424-165742_1361376887","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30295","dateFinished":"2019-05-20T12:10:33+0000","dateStarted":"2019-05-20T12:10:33+0000"},{"text":"%pyspark\nsongRDD.collect()","user":"anonymous","dateUpdated":"2019-05-20T12:10:46+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[['Beastie Boys', -5.0], ['Frank Sinatra', -10.0], ['Muse', -7.0], ['Muse', -6.0]]\n"}]},"apps":[],"jobName":"paragraph_1558337904023_751541833","id":"20190424-165800_784151006","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30296","dateFinished":"2019-05-20T12:10:46+0000","dateStarted":"2019-05-20T12:10:46+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=130"],"interpreterSettingId":"spark"}}},{"text":"%md \n#### count\n\nCount the number of elements in the RDD or Dataset","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>count</h4>\n<p>Count the number of elements in the RDD or Dataset</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904023_434514226","id":"20190424-165806_1358866061","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30297"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T12:10:54+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904024_802374552","id":"20190424-165815_89846959","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30298","dateFinished":"2019-05-20T12:10:54+0000","dateStarted":"2019-05-20T12:10:54+0000"},{"text":"%spark\nsongRDD.count()","user":"anonymous","dateUpdated":"2019-05-20T12:10:57+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res14: Long = 4\n"}]},"apps":[],"jobName":"paragraph_1558337904024_961880102","id":"20190424-165824_1711166050","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30299","dateFinished":"2019-05-20T12:10:57+0000","dateStarted":"2019-05-20T12:10:57+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=131"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T12:10:59+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904025_1566154597","id":"20190424-165838_945755043","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30300","dateFinished":"2019-05-20T12:10:59+0000","dateStarted":"2019-05-20T12:10:59+0000"},{"text":"%pyspark\nsongRDD.count()","user":"anonymous","dateUpdated":"2019-05-20T12:11:05+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"4\n"}]},"apps":[],"jobName":"paragraph_1558337904025_775371098","id":"20190424-165849_1458253661","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30301","dateFinished":"2019-05-20T12:11:06+0000","dateStarted":"2019-05-20T12:11:05+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=132"],"interpreterSettingId":"spark"}}},{"text":"%md \n#### reduce\n\nAggregate the elements of the dataset using the function `f`. Note that `f` must be *associative* and *commutative*.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>reduce</h4>\n<p>Aggregate the elements of the dataset using the function <code>f</code>. Note that <code>f</code> must be <em>associative</em> and <em>commutative</em>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904026_1544949690","id":"20190424-165856_583208975","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30302"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T12:11:10+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904031_1770664744","id":"20190424-165905_1993527109","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30303","dateFinished":"2019-05-20T12:11:10+0000","dateStarted":"2019-05-20T12:11:10+0000"},{"text":"%spark\nval songLoudness = songRDD.map(song => song.loudness)\n\nsongLoudness.reduce(_ + _)","user":"anonymous","dateUpdated":"2019-05-20T12:12:56+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"songLoudness: org.apache.spark.rdd.RDD[Double] = MapPartitionsRDD[235] at map at <console>:25\nres15: Double = -28.0\n"}]},"apps":[],"jobName":"paragraph_1558337904031_1631499128","id":"20190424-165916_355637872","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30304","dateFinished":"2019-05-20T12:11:15+0000","dateStarted":"2019-05-20T12:11:14+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=133"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T12:11:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904032_-1423772702","id":"20190424-165929_1930164406","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30305","dateFinished":"2019-05-20T12:11:27+0000","dateStarted":"2019-05-20T12:11:27+0000"},{"text":"%pyspark\n# 'reduce' uses PySpark specific aggregation operators which need to be imported separately\nfrom operator import add\n\nsongLoudness = songRDD.map(lambda x: x[1])\n\nsongLoudness.reduce(add)","user":"anonymous","dateUpdated":"2019-05-20T12:15:59+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"-28.0\n"}]},"apps":[],"jobName":"paragraph_1558337904033_-2139337053","id":"20190424-165938_112752037","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30306","dateFinished":"2019-05-20T12:16:07+0000","dateStarted":"2019-05-20T12:15:59+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=141"],"interpreterSettingId":"spark"}}},{"text":"%md \nIf `f` is not *associative* and *commutative* the result is non-deterministic.\n","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If <code>f</code> is not <em>associative</em> and <em>commutative</em> the result is non-deterministic.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904034_1443846906","id":"20190424-165944_1498056929","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30307"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T12:13:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904040_-1877008513","id":"20190424-165953_1693664106","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30308","dateFinished":"2019-05-20T12:13:56+0000","dateStarted":"2019-05-20T12:13:56+0000"},{"text":"%spark\nsongLoudness.reduce(_ - _)","user":"anonymous","dateUpdated":"2019-05-20T12:19:31+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res19: Double = -6.0\n"}]},"apps":[],"jobName":"paragraph_1558337904041_591136325","id":"20190424-170002_540114804","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30309","dateFinished":"2019-05-20T12:19:32+0000","dateStarted":"2019-05-20T12:19:31+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=156"],"interpreterSettingId":"spark"}}},{"text":"%spark\nsongLoudness.repartition(4).reduce(_ - _)","user":"anonymous","dateUpdated":"2019-05-20T12:19:34+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res20: Double = 8.0\n"}]},"apps":[],"jobName":"paragraph_1558337904041_1851302400","id":"20190424-170019_1286335245","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30310","dateFinished":"2019-05-20T12:19:35+0000","dateStarted":"2019-05-20T12:19:34+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=157"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T12:14:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904042_128875267","id":"20190424-170030_1014736459","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30311","dateFinished":"2019-05-20T12:14:16+0000","dateStarted":"2019-05-20T12:14:16+0000"},{"text":"%pyspark\n# 'reduce' uses PySpark specific aggregation operators which need to be imported separately\nfrom operator import sub\n\nsongLoudness.reduce(sub)","user":"anonymous","dateUpdated":"2019-05-20T12:19:44+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"6.0\n"}]},"apps":[],"jobName":"paragraph_1558337904042_-1388887665","id":"20190424-170041_1800184599","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30312","dateFinished":"2019-05-20T12:19:44+0000","dateStarted":"2019-05-20T12:19:44+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=158"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n# 'reduce' uses PySpark specific aggregation operators which need to be imported separately\nfrom operator import sub\n\nsongLoudness.repartition(4).reduce(sub)","user":"anonymous","dateUpdated":"2019-05-20T12:19:51+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"-6.0\n"}]},"apps":[],"jobName":"paragraph_1558337904043_-1138880844","id":"20190424-170051_880501761","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30313","dateFinished":"2019-05-20T12:19:51+0000","dateStarted":"2019-05-20T12:19:51+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=159"],"interpreterSettingId":"spark"}}},{"text":"%md \n#### foreach\n\nApply a function `f` to each element in the RDD. `f` is executed for side-effects only. The return-value of `f` is ignored.","user":"anonymous","dateUpdated":"2019-05-20T13:40:32+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>foreach</h4>\n<p>Apply a function <code>f</code> to each element in the RDD. <code>f</code> is executed for side-effects only. The return-value of <code>f</code> is ignored.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904043_-1751418727","id":"20190424-170116_1567664464","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30314","dateFinished":"2019-05-20T13:40:32+0000","dateStarted":"2019-05-20T13:40:32+0000"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T12:19:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904046_431296104","id":"20190424-170125_1350031129","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30315","dateFinished":"2019-05-20T12:19:57+0000","dateStarted":"2019-05-20T12:19:57+0000"},{"text":"%spark\n// 'FOREACH' IN COMPARISSON...\n\n// Initialize an empty list as an accumulator\nvar acc = sc.collectionAccumulator[String]\n\nval songRddForEach = songRDD.foreach(s => acc.add(s.artist))   // 'foreach' fills empty list 'acc' with 'artist' elements\n// 1st: list 'acc' no longer emtpy => side-effect\n// 2nd: 'foreach' returns type Unit = () => no return value","user":"anonymous","dateUpdated":"2019-05-20T14:01:12+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":227,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"acc: org.apache.spark.util.CollectionAccumulator[String] = CollectionAccumulator(id: 7222, name: None, value: [Beastie Boys, Frank Sinatra, Muse, Muse])\nsongRddForEach: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1558337904047_1461650959","id":"20190424-170136_2069416197","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30316","dateFinished":"2019-05-20T14:01:13+0000","dateStarted":"2019-05-20T14:01:12+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=217"],"interpreterSettingId":"spark"}}},{"text":"%spark\n// ...WITH 'MAP'\n\n// Initialize an empty list as a second accumulator\nvar acc2 = sc.collectionAccumulator[String]\n\nval songRddMap = songRDD.map(s => acc2.add(s.artist))   // 'map' does not fill list 'acc2'\n// 1st: list 'acc2' still empty => no side-effect\n// 2nd: 'map' returns new RDD","user":"anonymous","dateUpdated":"2019-05-20T14:01:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","lineNumbers":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1558359688485_1091219991","id":"20190520-134128_1468278728","dateCreated":"2019-05-20T13:41:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:43679","dateFinished":"2019-05-20T14:01:19+0000","dateStarted":"2019-05-20T14:01:19+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"acc2: org.apache.spark.util.CollectionAccumulator[String] = CollectionAccumulator(id: 7248, name: None, value: [])\nsongRddMap: org.apache.spark.rdd.RDD[Unit] = MapPartitionsRDD[596] at map at <console>:34\n"}]}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T12:20:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904047_-983078381","id":"20190424-170146_916496680","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30317","dateFinished":"2019-05-20T12:20:36+0000","dateStarted":"2019-05-20T12:20:36+0000"},{"text":"%pyspark \n# PySpark provides by default only accumulators for numeric types. Therefore we customize in this paragraph our own accumulator of type 'list'.\nfrom pyspark.accumulators import AccumulatorParam\n\nclass IteratorAccumulatorParam(AccumulatorParam):\n  \n    def zero(self, value):\n        return value\n      \n    def addInPlace(self, val1, val2):\n        return val1 + val2","user":"anonymous","dateUpdated":"2019-05-20T14:25:56+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1558337904048_1177922660","id":"20190424-170208_1367727542","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30318","dateFinished":"2019-05-20T14:25:56+0000","dateStarted":"2019-05-20T14:25:56+0000"},{"text":"%pyspark\n# 'FOREACH' IN COMPARISSON...\n\n# Initialize an empty list as an accumulator\nacc = sc.accumulator(list(), IteratorAccumulatorParam())\n\nsongRddForEach = songRDD.foreach(lambda x: acc.add([x[0]]))   # 'foreach' fills empty list 'acc' with 'artist' elements\nprint(acc.value)\ntype(songRddForEach)\n# 1st: list 'acc' no longer emtpy => side-effect\n# 2nd: 'foreach' returns type Unit = () => no return value","user":"anonymous","dateUpdated":"2019-05-20T14:28:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1558361902790_-979222979","id":"20190520-141822_1673321741","dateCreated":"2019-05-20T14:18:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:44658","dateFinished":"2019-05-20T14:28:30+0000","dateStarted":"2019-05-20T14:28:29+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['Beastie Boys', 'Frank Sinatra', 'Muse', 'Muse']\n<type 'NoneType'>\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=227"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n# ...WITH 'MAP'\n\n# Initialize an empty list as a second accumulator\nacc2 = sc.accumulator(list(), IteratorAccumulatorParam())\n\nsongRddMap = songRDD.map(lambda x: acc2.add([x[0]]))   # 'map' does not fill list 'acc2'\nprint(acc2.value)\ntype(songRddMap)\n# 1st: list 'acc2' still empty => no side-effect\n# 2nd: 'map' returns new RDD","user":"anonymous","dateUpdated":"2019-05-20T14:29:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1558361178847_-1228378806","id":"20190520-140618_2081768071","dateCreated":"2019-05-20T14:06:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:44530","dateFinished":"2019-05-20T14:29:50+0000","dateStarted":"2019-05-20T14:29:50+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[]\n<class 'pyspark.rdd.PipelinedRDD'>\n"}]}},{"text":"%md\n## 2.2.4 Group Exercise\nTake messySongRDD and for each Sequence in the RDD, return all strings from that sequence.","user":"anonymous","dateUpdated":"2019-05-20T07:38:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.2.4 Group Exercise</h2>\n<p>Take messySongRDD and for each Sequence in the RDD, return all strings from that sequence.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904048_294152947","id":"20190424-170215_325395611","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30319"},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T14:30:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904049_2084206392","id":"20190424-170223_676191105","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30320","dateFinished":"2019-05-20T14:30:45+0000","dateStarted":"2019-05-20T14:30:45+0000"},{"text":"%spark\n// create unstructured in-memory data\nval messySongArray = Array(\n  Seq(-5.0, \"Beastie Boys\"), \n  Seq(\"Frank Sinatra\", -10.0), \n  Seq(1, 2, 3, \"Muse\", -7.0)\n)\n\n// create RDD out of 'messySongArray'\nval messySongRDD = sc.parallelize(messySongArray)\n\nmessySongRDD.collect.foreach(println)\n\n// which is automatically distributed on n partitions\nval n = messySongRDD.getNumPartitions\nprintln(\"Partitions: \" + n)","user":"anonymous","dateUpdated":"2019-05-20T14:37:07+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"List(-5.0, Beastie Boys)\nList(Frank Sinatra, -10.0)\nList(1, 2, 3, Muse, -7.0)\nPartitions: 4\nmessySongArray: Array[Seq[Any]] = Array(List(-5.0, Beastie Boys), List(Frank Sinatra, -10.0), List(1, 2, 3, Muse, -7.0))\nmessySongRDD: org.apache.spark.rdd.RDD[Seq[Any]] = ParallelCollectionRDD[611] at parallelize at <console>:37\nn: Int = 4\n"}]},"apps":[],"jobName":"paragraph_1558337904049_-595774324","id":"20190424-170236_1666353346","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30321","dateFinished":"2019-05-20T14:34:08+0000","dateStarted":"2019-05-20T14:34:07+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=232"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T14:30:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904049_-816491653","id":"20190424-170252_1440874513","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30322","dateFinished":"2019-05-20T14:30:57+0000","dateStarted":"2019-05-20T14:30:57+0000"},{"text":"%pyspark\n# create unstructured in-memory data\nmessySongs = [(-5.0, 'Beastie Boys'), ('Frank Sinatra', -10.0), (1,2,3,'Muse', -7.0)]\n\n# create RDD out of 'messySongs'\nmessySongRDD = sc.parallelize(messySongs)\n\nfor element in messySongRDD.collect():\n    print(element)\n    \n# which is automatically distributed on n partitions\nn = messySongRDD.getNumPartitions()\nprint(\"Partitions: \" + str(n))","user":"anonymous","dateUpdated":"2019-05-20T14:38:35+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(-5.0, 'Beastie Boys')\n('Frank Sinatra', -10.0)\n(1, 2, 3, 'Muse', -7.0)\nPartitions: 4\n"}]},"apps":[],"jobName":"paragraph_1558337904050_544506483","id":"20190424-170303_656957778","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30323","dateFinished":"2019-05-20T14:38:35+0000","dateStarted":"2019-05-20T14:38:35+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=234"],"interpreterSettingId":"spark"}}},{"text":"%spark\n// Please add your solution here\n","user":"anonymous","dateUpdated":"2019-05-20T14:40:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1558337904051_348629208","id":"20190424-170315_1360912125","dateCreated":"2019-05-20T07:38:24+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30325"},{"text":"%pyspark\n# Please add you solution here","user":"anonymous","dateUpdated":"2019-05-20T14:40:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1558363193711_-1294175627","id":"20190520-143953_1096384125","dateCreated":"2019-05-20T14:39:53+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:45831"},{"text":"%md\n### Group Exercise Solution","user":"anonymous","dateUpdated":"2019-05-20T14:40:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1558363239884_1697544109","id":"20190520-144039_142514360","dateCreated":"2019-05-20T14:40:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:45999","dateFinished":"2019-05-20T14:40:42+0000","dateStarted":"2019-05-20T14:40:42+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Group Exercise Solution</h3>\n</div>"}]}},{"text":"%md\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>","user":"anonymous","dateUpdated":"2019-05-20T14:32:22+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://hazelcast.org/wp-content/uploads/2016/04/scala-logo.jpg' style='width:100px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904051_-1450447991","id":"20190424-170329_1031409891","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30326","dateFinished":"2019-05-20T14:32:22+0000","dateStarted":"2019-05-20T14:32:22+0000"},{"text":"%spark\n// 'flatMap' with filter taking the 'isInstanceOf' function\nmessySongRDD.flatMap(_.filter( _.isInstanceOf[String]))\n            .collect\n            .foreach(println)\n\nprintln\nprintln(\"###############################\")\nprintln\n\n// Alternatively:\n// write function with a pattern matching\ndef isString(x: Any): Boolean = x match {\n  case x: String => true\n  case _ => false  \n}\n\n// apply function to 'messySongRDD'\nmessySongRDD.map(songSeq => songSeq.filter(isString)(0))\n            .collect\n            .foreach(println)","user":"anonymous","dateUpdated":"2019-05-20T14:41:03+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\n\n###############################\n\nBeastie Boys\nFrank Sinatra\nMuse\nisString: (x: Any)Boolean\n"}]},"apps":[],"jobName":"paragraph_1558337904052_-1290289034","id":"20190424-170343_1217734032","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30327","dateFinished":"2019-05-20T14:38:57+0000","dateStarted":"2019-05-20T14:38:57+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=235","http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=236"],"interpreterSettingId":"spark"}}},{"text":"%md\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>","user":"anonymous","dateUpdated":"2019-05-20T14:34:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src='https://upload.wikimedia.org/wikipedia/commons/f/f8/Python_logo_and_wordmark.svg' style='width:150px'>\n</div>"}]},"apps":[],"jobName":"paragraph_1558337904053_1247074317","id":"20190424-170411_1049365215","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30329","dateFinished":"2019-05-20T14:34:44+0000","dateStarted":"2019-05-20T14:34:44+0000"},{"text":"%pyspark\n# 'flatMap' with filter taking the 'isInstanceOf' function\nstringsOnlyRDD = messySongRDD.flatMap(lambda element: element).filter(lambda element: type(element) == str).collect()\n\nfor element in stringsOnlyRDD:\n    print(element)","user":"anonymous","dateUpdated":"2019-05-20T14:45:20+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Beastie Boys\nFrank Sinatra\nMuse\n"}]},"apps":[],"jobName":"paragraph_1558337904053_-2068784955","id":"20190424-170424_402635312","dateCreated":"2019-05-20T07:38:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30330","dateFinished":"2019-05-20T14:45:28+0000","dateStarted":"2019-05-20T14:45:20+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-39-158.eu-central-1.compute.internal:4040/jobs/job?id=237"],"interpreterSettingId":"spark"}}}],"name":"/2. Operations: Transformations & Actions/2.2 RDD: Transformations & Actions","id":"2EBD9HNWQ","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}